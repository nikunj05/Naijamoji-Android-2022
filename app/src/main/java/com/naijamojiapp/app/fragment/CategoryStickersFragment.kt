package com.naijamojiapp.app.fragmentimport android.content.Contextimport android.content.Intentimport android.graphics.Bitmapimport android.graphics.Canvasimport android.graphics.Colorimport android.net.Uriimport android.os.Bundleimport android.text.TextUtilsimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.ImageViewimport android.widget.LinearLayoutimport android.widget.TextViewimport androidx.core.content.res.ResourcesCompatimport androidx.fragment.app.Fragmentimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.bumptech.glide.Glideimport com.bumptech.glide.load.engine.GlideExceptionimport com.bumptech.glide.request.RequestListenerimport com.naijamojiapp.Rimport com.naijamojiapp.app.adapter.CategoryStickersAdapterimport com.naijamojiapp.app.adapter.SearchStickersAdapterimport com.naijamojiapp.app.adapter.newadapter.LocalAndDaynamicStickersAdapterimport com.naijamojiapp.app.cusromsharedialog.ShareDialogimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.interfaces.StickerClickedimport com.naijamojiapp.app.interfaces.newApp.SendDaynamicStickersAppInterfaceimport com.naijamojiapp.app.interfaces.newApp.SendLocalStickersAppInterfaceimport com.naijamojiapp.app.quickactiondialog.ActionItemimport com.naijamojiapp.app.quickactiondialog.QuickActionimport com.naijamojiapp.app.response.CommonResponseimport com.naijamojiapp.app.response.EmojiListResponseimport com.naijamojiapp.app.response.newResponse.StickerListByTagOrCategoryimport com.naijamojiapp.app.roomDB.AppDatabaseimport com.naijamojiapp.app.roomDB.entity.AllStickerListimport com.naijamojiapp.app.roomDB.entity.RecentStickerListimport com.naijamojiapp.app.sqlitedb.DataModelimport com.naijamojiapp.app.sqlitedb.DatabaseHelperimport com.naijamojiapp.app.studiomode.StudioModeActivityimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.GlideAppimport com.naijamojiapp.app.utils.Preferencesimport java.io.Fileimport java.io.FileOutputStreamclass CategoryStickersFragment : Fragment(),        SendLocalStickersAppInterface,        SendDaynamicStickersAppInterface {    //sqlitedb    lateinit var database: DatabaseHelper    var categoryId: String? = ""    var tvError: TextView? = null    private var shareDialog: ShareDialog? = null    //New    var mLocalAndDaynamicStickersAdapter: LocalAndDaynamicStickersAdapter? = null    var mEmojiList: ArrayList<AllStickerList>? = null    var mDatabase: AppDatabase? = null    var llMain: LinearLayout? = null    var rvCategoryStickers: RecyclerView? = null    var mLinearLayoutManager1: LinearLayoutManager? = null    companion object {        fun newInstance(categoryId: String): CategoryStickersFragment {            val fragment = CategoryStickersFragment()            val bundle = Bundle()            bundle.putString("categoryId", categoryId)            fragment.arguments = bundle            return fragment        }    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        // Inflate the layout for this fragment        val view = inflater.inflate(R.layout.fragment_category_stickers, container, false)        init(view)        return view    }    private fun init(view: View) {        mDatabase = AppDatabase.getDatabaseInstance(activity!!)        rvCategoryStickers = view.findViewById(R.id.rv_category_stickers)        mLinearLayoutManager1 = GridLayoutManager(context, 3)        rvCategoryStickers!!.setLayoutManager(mLinearLayoutManager1)        llMain = view.findViewById(R.id.ll_main)        tvError = view.findViewById(R.id.tvError)    }    override fun onResume() {        super.onResume()        val bundle = arguments        if (bundle != null) {            categoryId = bundle.getString("categoryId")            Log.i("categoryId", ""+categoryId)        }        mEmojiList = mDatabase!!.userDao().getStickersByID(categoryId) as ArrayList<AllStickerList>?        var mDaynamicEmojilist: ArrayList<StickerListByTagOrCategory.Result>? = null        if (mEmojiList != null && mEmojiList!!.size > 0) {            mLocalAndDaynamicStickersAdapter = LocalAndDaynamicStickersAdapter(context!!, mEmojiList, mDaynamicEmojilist,                    this@CategoryStickersFragment,                    this@CategoryStickersFragment)            rvCategoryStickers!!.setAdapter(mLocalAndDaynamicStickersAdapter)            rvCategoryStickers!!.setHasFixedSize(true);//                    rvCategoryStickers!!.setItemViewCacheSize(mLocalAndDaynamicStickersAdapter!!.la)            rvCategoryStickers!!.visibility = View.VISIBLE            tvError!!.visibility = View.GONE        } else {            tvError!!.visibility = View.VISIBLE            rvCategoryStickers!!.visibility = View.GONE            tvError!!.text = "No stickers found...."        }    }    override fun sendSticekrs(context: Context?, position: Int, result: AllStickerList?, mShareOrNot: String?, bitmap: Bitmap?, mImageVIew: ImageView?) {        if (!TextUtils.isEmpty(mShareOrNot) && mShareOrNot.equals("0")) {            //ShareImage            if (result!!.is_gender_available.equals("0")) {                shareImage(result.image, result.id,result!!)            } else {                if (result.genderSticker.equals("ML")) {                    shareImage(result.img_m_light, result.id,result!!)                } else if (result.genderSticker.equals("MM")) {                    shareImage(result.img_m_medium, result.id,result!!)                } else if (result.genderSticker.equals("MD")) {                    shareImage(result.img_m_dark, result.id,result!!)                } else if (result.genderSticker.equals("FL")) {                    shareImage(result.img_f_light, result.id,result!!)                } else if (result.genderSticker.equals("FM")) {                    shareImage(result.img_f_medium, result.id,result!!)                } else if (result.genderSticker.equals("FD")) {                    shareImage(result.img_f_dark, result.id,result!!)                }            }        } else {            goToStudioMode(result!!, mImageVIew)        }    }    private fun goToStudioMode(data: AllStickerList?, mImageView: ImageView?) {        if (data!!.is_gender_available.equals("0") && data.is_studiomode.equals("0")) {        } else {            val quickAction: QuickAction            QuickAction.setDefaultColor(ResourcesCompat.getColor(context!!.resources, R.color.colorPrimary, null))            QuickAction.setDefaultTextColor(Color.BLACK)            val light = ActionItem(0, "", R.color.dark)            val medium = ActionItem(1, "", R.color.medium)            val dark = ActionItem(2, "", R.color.light)            val gender = ActionItem(3, "", R.drawable.gender_popup_new)            val studiomode = ActionItem(4, "", R.drawable.studiomode_popup_new)            light.isSticky = true            medium.isSticky = true            dark.isSticky = true            gender.isSticky = true            studiomode.isSticky = true            quickAction = QuickAction(context!!, QuickAction.HORIZONTAL)            quickAction.setColorRes(R.color.white)            if (data.is_gender_available.equals("0") && data.is_studiomode.equals("1")) {                quickAction.addActionItem(studiomode)            } else if (data.is_gender_available.equals("1") && data.is_studiomode.equals("0")) {                quickAction.addActionItem(light)                quickAction.addActionItem(medium)                quickAction.addActionItem(dark)                quickAction.addActionItem(gender)            } else {                quickAction.addActionItem(light)                quickAction.addActionItem(medium)                quickAction.addActionItem(dark)                quickAction.addActionItem(gender)                quickAction.addActionItem(studiomode)            }            quickAction.setOnActionItemClickListener { item ->                val mActionId = item.actionId                if (mActionId == 0) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", data.genderSticker)                    }                } else if (mActionId == 1) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", data.genderSticker)                    }                } else if (mActionId == 2) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", data.genderSticker)                    }                } else if (mActionId == 3) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", data.genderSticker)                    }                } else if (mActionId == 4) {                    if (data.is_gender_available.equals("0")) {                        goToApp( data.image!!, data.id!!,data.text_limit!!)                    } else {                        if (data.genderSticker.equals("ML")) {                            goToApp( data.img_m_light!!, data.id!!,data.text_limit!!)                        }                        if (data.genderSticker.equals("MM")) {                            goToApp( data.img_m_medium!!, data.id!!,data.text_limit!!)                        }                        if (data.genderSticker.equals("MD")) {                            goToApp( data.img_m_dark!!, data.id!!,data.text_limit!!)                        }                        if (data.genderSticker.equals("FL")) {                            goToApp(data.img_f_light!!, data.id!!,data.text_limit!!)                        }                        if (data.genderSticker.equals("FM")) {                            goToApp( data.img_f_medium!!, data.id!!,data.text_limit!!)                        }                        if (data.genderSticker.equals("FD")) {                            goToApp( data.img_f_dark!!, data.id!!,data.text_limit!!)                        }                    }                }            }            quickAction.setOnDismissListener {}            quickAction.show(mImageView)        }    }    private fun goToApp(mStickerUrl: String, mStickerId: String,mTextLimit: String) {        val intent = Intent(context!!, StudioModeActivity::class.java)        intent.putExtra("selected_sticker", mStickerUrl)        intent.putExtra("selected_id", mStickerId)        intent.putExtra("character_limit", mTextLimit)        startActivity(intent)    }    private fun shareImage(image: String?, mStickerId: String,result: AllStickerList?) {        GlideApp.with(this)                .asBitmap()                .load(image)                .listener(object : RequestListener<Bitmap> {                    override fun onLoadFailed(                            e: GlideException?,                            model: Any?,                            target: com.bumptech.glide.request.target.Target<Bitmap>?,                            isFirstResource: Boolean                    ): Boolean {                        return false                    }                    override fun onResourceReady(                            bitmap: Bitmap?,                            model: Any?,                            target: com.bumptech.glide.request.target.Target<Bitmap>?,                            dataSource: com.bumptech.glide.load.DataSource?,                            isFirstResource: Boolean                    ): Boolean {                        shareBitmap(bitmap!!, image!!)                        return false                    }                }).priority(com.bumptech.glide.Priority.IMMEDIATE)                .submit()        //Emoji useg webservice        if (CheckConnection.getInstance(activity!!).isConnectingToInternet()) {            callStickerUseWs(mStickerId)        } else {            CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))        }        var mRecentStickerList: RecentStickerList? = null        mRecentStickerList = RecentStickerList(result!!.id,                result.title,                result.category_id,                result.is_publish,                result.is_studiomode,                result.is_gender_available,                result.text_limit,                result.image,                result.img_f_dark,                result.img_f_medium,                result.img_f_light,                result.img_m_dark,                result.img_m_medium,                result.img_m_light,                result.position,                result.created_at,                result.updated_at)        if(mDatabase!!.userDao().recentStickersList!=null && mDatabase!!.userDao().recentStickersList.size == 6){            mDatabase!!.userDao().deleteRecentStickers(mDatabase!!.userDao().recentStickersList.get(5).id)            mDatabase!!.userDao().insertRecentStickers(mRecentStickerList)        }else{            mDatabase!!.userDao().insertRecentStickers(mRecentStickerList)        }    }    private fun shareBitmap(bitmap: Bitmap, image: String) {        try {            val file = File(activity!!.getExternalCacheDir(), "share.png")            val fOut = FileOutputStream(file)            val newBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig())            val canvas = Canvas(newBitmap)            canvas.drawColor(Color.WHITE)            canvas.drawBitmap(bitmap, 0f, 0f, null);//            newBitmap = Bitmap.createScaledBitmap(newBitmap, 512, 512, true)            newBitmap.compress(Bitmap.CompressFormat.PNG, 100, fOut)            fOut.flush()            fOut.close()            file.setReadable(true, false)            val builder: ShareDialog.Builder = ShareDialog.Builder()            builder.setType(ShareDialog.TYPE_IMAGE)            builder.showAsList(true)            this.shareDialog = builder.build()            shareDialog!!.setShareContent(Uri.fromFile(file).toString(), image)            shareDialog!!.show(activity!!.supportFragmentManager)        } catch (e: Exception) {            e.printStackTrace()        }    }    // Call Emoji Usage Webserice    private fun callStickerUseWs(mStickerId: String) {        if (activity != null) {            AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_emoji_usage)                    .addBodyParameter(Constants.INSTANCE.str_emoji_id, mStickerId)                    .setPriority(Priority.MEDIUM)                    .build()                    .getAsObject(CommonResponse::class.java, object : ParsedRequestListener<CommonResponse> {                        override fun onResponse(response: CommonResponse?) {                            Log.i("response", response.toString())                            var mSuccess = false                            if (response != null)                                if (response.status!!.success == (Constants.INSTANCE.one)) {                                    mSuccess = true                                }                            if (mSuccess) {                            } else {                                try {                                    CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                                } catch (e: Exception) {                                    e.printStackTrace()                                    CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                                }                            }                        }                        override fun onError(anError: ANError) {                            Log.i("error", anError.toString())                        }                    })        }    }    override fun sendDaynamicSticekrs(context: Context?, position: Int, data: StickerListByTagOrCategory.Result?, isSendOrNot: String?, bitmap: Bitmap?, mImageVIew: ImageView?) {}}