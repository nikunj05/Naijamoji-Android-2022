package com.naijamojiapp.app.fragmentimport android.content.Contextimport android.content.Intentimport android.graphics.Bitmapimport android.graphics.Canvasimport android.graphics.Colorimport android.net.Uriimport android.os.Bundleimport android.os.Handlerimport android.text.Editableimport android.text.TextUtilsimport android.text.TextWatcherimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.view.inputmethod.EditorInfoimport android.view.inputmethod.InputMethodManagerimport android.widget.*import androidx.core.content.res.ResourcesCompatimport androidx.fragment.app.Fragmentimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.bumptech.glide.Glideimport com.bumptech.glide.load.engine.GlideExceptionimport com.bumptech.glide.request.RequestListenerimport com.google.gson.Gsonimport com.naijamojiapp.Rimport com.naijamojiapp.app.activity.HomeActivityimport com.naijamojiapp.app.activity.LoginAndRegistrationActivityimport com.naijamojiapp.app.adapter.RecentStickersAdapterimport com.naijamojiapp.app.adapter.SearchStickersAdapterimport com.naijamojiapp.app.adapter.newadapter.LocalAndDaynamicStickersAdapterimport com.naijamojiapp.app.adapter.newadapter.StickerTagAppAdapterimport com.naijamojiapp.app.cusromsharedialog.ShareDialogimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.interfaces.RecentStickerClickedimport com.naijamojiapp.app.interfaces.newApp.SendDaynamicStickersAppInterfaceimport com.naijamojiapp.app.interfaces.newApp.SendLocalStickersAppInterfaceimport com.naijamojiapp.app.quickactiondialog.ActionItemimport com.naijamojiapp.app.quickactiondialog.QuickActionimport com.naijamojiapp.app.response.CategoryTabResponseimport com.naijamojiapp.app.response.CommonResponseimport com.naijamojiapp.app.response.EmojiListResponseimport com.naijamojiapp.app.response.newResponse.StickerListByTagOrCategoryimport com.naijamojiapp.app.roomDB.AppDatabaseimport com.naijamojiapp.app.roomDB.entity.AllStickerListimport com.naijamojiapp.app.roomDB.entity.CatListTabimport com.naijamojiapp.app.roomDB.entity.RecentStickerListimport com.naijamojiapp.app.roomDB.entity.TagListimport com.naijamojiapp.app.sqlitedb.DataModelimport com.naijamojiapp.app.sqlitedb.DatabaseHelperimport com.naijamojiapp.app.studiomode.StudioModeActivityimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.GlideAppimport com.naijamojiapp.app.utils.Preferencesimport com.naijamojiapp.ime.keyboard.KeyboardStickerView.ClickonTagInterfaceimport java.io.Fileimport java.io.FileOutputStreamclass RecentAndPopularFragment : Fragment(), View.OnClickListener,        SendLocalStickersAppInterface,        SendDaynamicStickersAppInterface,        RecentStickerClicked,        ClickonTagInterface/* StickerTagClicked, StickerClicked, RecentStickerClicked */ {    //CategoryView    var llMain: LinearLayout? = null    var rvRecent: RecyclerView? = null    var rvPopular: RecyclerView? = null    var mLinearLayoutManager: GridLayoutManager? = null    var mLinearLayoutManager1: GridLayoutManager? = null    var mStickersAdapter: RecentStickersAdapter? = null    //SearchView    var llMainSearch: LinearLayout? = null    var edtSearch: EditText? = null    var rvSearchCategory: RecyclerView? = null    var mLinearLayoutManager3: LinearLayoutManager? = null    var mStickerTagList = ArrayList<CategoryTabResponse.Categories>()    var mStickerTagAppAdapter: StickerTagAppAdapter? = null    var viewtype: String? = null    //Search Sticker list    var llSearchSearchStickers: LinearLayout? = null    var rvSearchStickers: RecyclerView? = null    var mLinearLayoutManager4: LinearLayoutManager? = null    var mSearchStickersAdapter: SearchStickersAdapter? = null    var ivClearText: ImageView? = null    var rlError: RelativeLayout? = null    var rlRecentEmpty: RelativeLayout? = null    internal var isVisibleToUser = false    //sqlitedb    lateinit var database: DatabaseHelper    var mRecentStickersList = ArrayList<RecentStickerList>()    private var pbar: ProgressBar? = null    //ShareDialog    private var shareDialog: ShareDialog? = null    var mDatabase: AppDatabase? = null    var categoryId: String? = ""    //New    var mLocalAndDaynamicStickersAdapter: LocalAndDaynamicStickersAdapter? = null    val mEmojiList: ArrayList<AllStickerList>? = null    var mDaynamicEmojilist: ArrayList<StickerListByTagOrCategory.Result>? = null    companion object {        fun newInstance(type: String, categoryId: String): RecentAndPopularFragment {            val fragment = RecentAndPopularFragment()            val bundle = Bundle()            bundle.putString("categoryId", categoryId)            bundle.putString("viewtype", type)            fragment.arguments = bundle            return fragment        }    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        // Inflate the layout for this fragment        val view = inflater.inflate(R.layout.fragment_recent_popular, container, false)        val bundle = arguments        if (bundle != null) {            if (bundle.containsKey("viewtype")) {                viewtype = bundle.getString("viewtype")                categoryId = bundle.getString("categoryId")            }        }        init(view)        return view    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)    }    private fun init(view: View) {        mDatabase = AppDatabase.getDatabaseInstance(activity)        //CategoryViews        llMain = view.findViewById(R.id.ll_main)        pbar = view.findViewById(R.id.pbar)        //Recent        rvRecent = view.findViewById(R.id.rv_recent)        mLinearLayoutManager = GridLayoutManager(context, 3)        rvRecent!!.layoutManager = mLinearLayoutManager        rvRecent!!.isNestedScrollingEnabled = false        rlRecentEmpty = view.findViewById(R.id.rl_recent_empty)        //Populer        rvPopular = view.findViewById(R.id.rv_popular)        mLinearLayoutManager1 = GridLayoutManager(context, 3)        rvPopular!!.layoutManager = mLinearLayoutManager1        rvPopular!!.isNestedScrollingEnabled = false        //StickerTagViews        llMainSearch = view.findViewById(R.id.ll_main_search)        edtSearch = view.findViewById(R.id.edt_search)        rvSearchCategory = view.findViewById(R.id.rv_search_category)        mLinearLayoutManager3 = GridLayoutManager(context, 2)        rvSearchCategory!!.layoutManager = mLinearLayoutManager3        rvSearchCategory!!.isNestedScrollingEnabled = false        ivClearText = view.findViewById(R.id.iv_clear_text)        ivClearText!!.setOnClickListener(this)        if (!TextUtils.isEmpty(viewtype)) {            if (viewtype.equals("SearchView")) {                llMain!!.visibility = View.GONE                llMainSearch!!.visibility = View.VISIBLE                mStickerTagAppAdapter = StickerTagAppAdapter(context!!, this@RecentAndPopularFragment, mDatabase!!.userDao().allTagList as ArrayList<TagList>)                rvSearchCategory!!.adapter = mStickerTagAppAdapter            } else {                llMain!!.visibility = View.VISIBLE                llMainSearch!!.visibility = View.GONE            }        } else {            llMain!!.visibility = View.VISIBLE            llMainSearch!!.visibility = View.GONE        }        /*edtSearch!!.setOnEditorActionListener{ v, actionId, event ->            var handled = false            if (actionId == EditorInfo.IME_ACTION_SEARCH) {                searchStickers(edtSearch!!.getText().toString())                handled = true                val mgr = activity!!.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager                mgr.hideSoftInputFromWindow(edtSearch!!.getWindowToken(), 0)            }            handled        }*/        edtSearch!!.addTextChangedListener(object : TextWatcher {            override fun onTextChanged(c: CharSequence, start: Int, before: Int, count: Int) {                if (c != null && !TextUtils.isEmpty(c)) {                    Log.d("Print search if","===>"+c.toString());                    mStickerTagAppAdapter = StickerTagAppAdapter(context!!, this@RecentAndPopularFragment, mDatabase!!.userDao().getTagBySearch("%" + c.toString() + "%") as java.util.ArrayList<TagList>)                    rvSearchCategory!!.adapter = mStickerTagAppAdapter                    ivClearText!!.visibility = View.VISIBLE                } else {                    Log.d("Print search else","===>");                    mStickerTagAppAdapter = StickerTagAppAdapter(context!!, this@RecentAndPopularFragment, mDatabase!!.userDao().allTagList as ArrayList<TagList>)                    rvSearchCategory!!.adapter = mStickerTagAppAdapter                    ivClearText!!.visibility = View.GONE                }            }            override fun beforeTextChanged(c: CharSequence, start: Int, count: Int, after: Int) {            }            override fun afterTextChanged(c: Editable) {            }        })        //SearchStickersList        //StickerTagViews        llSearchSearchStickers = view.findViewById(R.id.ll_search_search_stickers)        rvSearchStickers = view.findViewById(R.id.rv_search_stickers)        mLinearLayoutManager4 = GridLayoutManager(context, 3)        rvSearchStickers!!.layoutManager = mLinearLayoutManager4        rvSearchStickers!!.isNestedScrollingEnabled = false        rlError = view.findViewById(R.id.rl_error)        rlError!!.setOnClickListener(this)    }    override fun setUserVisibleHint(isVisibleToUser: Boolean) {        super.setUserVisibleHint(isVisibleToUser)        this.isVisibleToUser = isVisibleToUser        Log.e("call", "Recent and Popular fragment")    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.iv_clear_text -> {                edtSearch!!.setText("")            }        }    }    private fun shareBitmap(bitmap: Bitmap, image: String) {        try {            val file = File(requireActivity().externalCacheDir, "share.png")            val fOut = FileOutputStream(file)            val newBitmap = Bitmap.createBitmap(bitmap.width, bitmap.height, bitmap.config)            val canvas = Canvas(newBitmap)            canvas.drawColor(Color.TRANSPARENT)            canvas.drawBitmap(bitmap, 0f, 0f, null)            newBitmap.compress(Bitmap.CompressFormat.PNG, 100, fOut)            fOut.flush()            fOut.close()            file.setReadable(true, false)            val builder: ShareDialog.Builder = ShareDialog.Builder()            builder.setType(ShareDialog.TYPE_IMAGE)            builder.showAsList(true)            this.shareDialog = builder.build()            shareDialog!!.setShareContent(Uri.fromFile(file).toString(), image,bitmap)            shareDialog!!.show(requireActivity().supportFragmentManager)        } catch (e: Exception) {            e.printStackTrace()        }    }    fun showProgressbar() {        if (pbar != null)            pbar!!.visibility = View.VISIBLE    }    fun hideprogressbar() {        if (pbar != null)            pbar!!.visibility = View.GONE    }    //Populer sticker Webservice    private fun callPopulerStickersWs(mTagId: String, isSearch: Boolean) {        if (activity != null) {            showProgressbar()            Log.i("categoryId", "===>"+categoryId)            if (isSearch) {                AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_emoji_list_tag)                        .addBodyParameter(Constants.INSTANCE.str_tag, mTagId)            } else {                AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_emoji_list_category)                        .addBodyParameter(Constants.INSTANCE.str_category, mTagId)            }                    .setPriority(Priority.MEDIUM)                    .build()                    .getAsObject(StickerListByTagOrCategory::class.java, object : ParsedRequestListener<StickerListByTagOrCategory> {                        override fun onResponse(response: StickerListByTagOrCategory?) {                            Log.i("response", response.toString())                            var mSuccess = false                            if (response != null)                                if (response.status!!.success == (Constants.INSTANCE.one)) {                                    mSuccess = true                                }                            if (mSuccess) {                                val mEmojiList: ArrayList<AllStickerList>? = null                                mDaynamicEmojilist = response!!.status!!.result!!                                try {                                    if (RecentAndPopularFragment != null && mDaynamicEmojilist != null && mDaynamicEmojilist!!.size > 0) {                                        if (isSearch) {                                            mLocalAndDaynamicStickersAdapter = LocalAndDaynamicStickersAdapter(context!!, mEmojiList, mDaynamicEmojilist, this@RecentAndPopularFragment, this@RecentAndPopularFragment)                                            rvSearchStickers!!.adapter = mLocalAndDaynamicStickersAdapter                                            rvSearchStickers!!.setHasFixedSize(true)                                            rvSearchStickers!!.setItemViewCacheSize(mDaynamicEmojilist!!.size)                                        } else {                                            mLocalAndDaynamicStickersAdapter = LocalAndDaynamicStickersAdapter(context!!, mEmojiList, mDaynamicEmojilist, this@RecentAndPopularFragment, this@RecentAndPopularFragment)                                            rvPopular!!.adapter = mLocalAndDaynamicStickersAdapter                                            rvPopular!!.setHasFixedSize(true)                                            rvPopular!!.setItemViewCacheSize(mDaynamicEmojilist!!.size)                                        }                                    } else {                                    }                                } catch (e: Exception) {                                }                                hideprogressbar()                            } else {                                try {                                    hideprogressbar()                                    CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                                } catch (e: Exception) {                                    hideprogressbar()                                    e.printStackTrace()                                    CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                                }                            }                        }                        override fun onError(anError: ANError) {                            hideprogressbar()                            Log.i("error", anError.toString())                        }                    })        }    }    override fun sendSticekrs(context: Context?, position: Int, data: AllStickerList?, isSendOrNot: String?, bitmap: Bitmap?, mImageVIew: ImageView?) {}    override fun sendDaynamicSticekrs(context: Context?, position: Int, result: StickerListByTagOrCategory.Result?, mShareOrNot: String?, bitmap: Bitmap?, mImageVIew: ImageView?) {        if (!TextUtils.isEmpty(mShareOrNot) && mShareOrNot.equals("0")) {            //ShareImage            if (result!!.is_gender_available.equals("0")) {                shareImage(result.image, result.id!!,result!!)            } else {                if (result.genderSticker.equals("ML")) {                    shareImage(result.img_m_light, result.id!!,result!!)                } else if (result.genderSticker.equals("MM")) {                    shareImage(result.img_m_medium, result.id!!,result!!)                } else if (result.genderSticker.equals("MD")) {                    shareImage(result.img_m_dark, result.id!!,result!!)                } else if (result.genderSticker.equals("FL")) {                    shareImage(result.img_f_light, result.id!!,result!!)                } else if (result.genderSticker.equals("FM")) {                    shareImage(result.img_f_medium, result.id!!,result!!)                } else if (result.genderSticker.equals("FD")) {                    shareImage(result.img_f_dark, result.id!!,result!!)                }            }        } else {            goToStudioMode(result, mImageVIew)        }    }    private fun goToStudioMode(data: StickerListByTagOrCategory.Result?, mImageView: ImageView?) {        if (data!!.is_gender_available.equals("0") && data!!.is_studiomode.equals("0")) {        } else {            val quickAction: QuickAction            QuickAction.setDefaultColor(ResourcesCompat.getColor(context!!.resources, R.color.colorPrimary, null))            QuickAction.setDefaultTextColor(Color.BLACK)            val light = ActionItem(0, "", R.color.dark)            val medium = ActionItem(1, "", R.color.medium)            val dark = ActionItem(2, "", R.color.light)            val gender = ActionItem(3, "", R.drawable.gender_popup_new)            val studiomode = ActionItem(4, "", R.drawable.studiomode_popup_new)            light.isSticky = true            medium.isSticky = true            dark.isSticky = true            gender.isSticky = true            studiomode.isSticky = true            quickAction = QuickAction(context!!, QuickAction.HORIZONTAL)            quickAction.setColorRes(R.color.white)            if (data.is_gender_available.equals("0") && data.is_studiomode.equals("1")) {                quickAction.addActionItem(studiomode)            } else if (data.is_gender_available.equals("1") && data.is_studiomode.equals("0")) {                quickAction.addActionItem(light)                quickAction.addActionItem(medium)                quickAction.addActionItem(dark)                quickAction.addActionItem(gender)            } else {                quickAction.addActionItem(light)                quickAction.addActionItem(medium)                quickAction.addActionItem(dark)                quickAction.addActionItem(gender)                quickAction.addActionItem(studiomode)            }            quickAction.setOnActionItemClickListener { item ->                val mActionId = item.actionId                if (mActionId == 0) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender","===>"+ data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender","===>"+ data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", "===>+"+data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", "===>"+data.genderSticker)                    }                } else if (mActionId == 1) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender","===>"+ data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", "===>"+data.genderSticker)                    }                } else if (mActionId == 2) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", "===>"+data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", "===>"+data.genderSticker)                    }                } else if (mActionId == 3) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", "===>"+data.genderSticker)                    } else if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", "===>"+data.genderSticker)                    } else if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", "===>"+data.genderSticker)                    } else if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", "===>"+data.genderSticker)                    } else if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", "===>"+data.genderSticker)                    } else if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", "===>"+data.genderSticker)                    }                } else if (mActionId == 4) {                    if (data.is_gender_available.equals("0")) {                        goToApp(data.image!!, data.id!!, data.text_limit!!)                    } else {                        if (data.genderSticker.equals("ML")) {                            goToApp(data.img_m_light!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("MM")) {                            goToApp(data.img_m_medium!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("MD")) {                            goToApp(data.img_m_dark!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("FL")) {                            goToApp(data.img_f_light!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("FM")) {                            goToApp(data.img_f_medium!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("FD")) {                            goToApp(data.img_f_dark!!, data.id!!, data.text_limit!!)                        }                    }                }            }            quickAction.setOnDismissListener {}            quickAction.show(mImageView)        }    }    private fun goToApp(mStickerUrl: String, mStickerId: String, mTextLimit: String) {        val intent = Intent(context!!, StudioModeActivity::class.java)        intent.putExtra("selected_sticker", mStickerUrl)        intent.putExtra("selected_id", mStickerId)        intent.putExtra("character_limit", mTextLimit)        startActivity(intent)    }    private fun shareImage(image: String?, mStickerId: String?,result: StickerListByTagOrCategory.Result?) {        GlideApp.with(this)                .asBitmap()                .load(image)                .listener(object : RequestListener<Bitmap> {                    override fun onLoadFailed(                            e: GlideException?,                            model: Any?,                            target: com.bumptech.glide.request.target.Target<Bitmap>?,                            isFirstResource: Boolean                    ): Boolean {                        return false                    }                    override fun onResourceReady(                            bitmap: Bitmap?,                            model: Any?,                            target: com.bumptech.glide.request.target.Target<Bitmap>?,                            dataSource: com.bumptech.glide.load.DataSource?,                            isFirstResource: Boolean                    ): Boolean {                        shareBitmap(bitmap!!, image!!)                        return false                    }                }).priority(com.bumptech.glide.Priority.IMMEDIATE)                .submit()        //Emoji useg webservice        if (CheckConnection.getInstance(activity!!).isConnectingToInternet()) {            callStickerUseWs(mStickerId!!)        } else {            CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))        }        var mRecentStickerList: RecentStickerList? = null        mRecentStickerList = RecentStickerList(result!!.id,                result.title,                result.category_id,                result.is_publish,                result.is_studiomode,                result.is_gender_available,                result.text_limit,                result.image,                result.img_f_dark,                result.img_f_medium,                result.img_f_light,                result.img_m_dark,                result.img_m_medium,                result.img_m_light,                result.position,                result.created_at,                result.updated_at)        if(mRecentStickersList!=null && mRecentStickersList.size == 6){            mDatabase!!.userDao().deleteRecentStickers(mRecentStickersList.get(5).id)            mDatabase!!.userDao().insertRecentStickers(mRecentStickerList)        }else{            mDatabase!!.userDao().insertRecentStickers(mRecentStickerList)        }        val handler = Handler()        val runnable = Runnable {            setRecentStickerApdapter()        }        handler.postDelayed(runnable, 2000)    }    override fun onResume() {        super.onResume()        setRecentStickerApdapter()        if (activity != null) {            if (CheckConnection.getInstance(activity!!).isConnectingToInternet) {                callPopulerStickersWs("1", false)            } else {                CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))            }        }    }    override fun tagClick(mTagId: String?) {        if (activity != null) {            val mgr = activity!!.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager            mgr.hideSoftInputFromWindow(edtSearch!!.getWindowToken(), 0)            edtSearch!!.setText("")            llMainSearch!!.visibility = View.GONE            llMain!!.visibility = View.GONE            llSearchSearchStickers!!.visibility = View.VISIBLE            if (CheckConnection.getInstance(activity!!).isConnectingToInternet) {                callPopulerStickersWs(mTagId!!, true)            } else {                CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))            }        }    }    // Call Emoji Usage Webserice    private fun callStickerUseWs(mStickerId: String?) {        if (activity != null) {            AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_emoji_usage)                    .addBodyParameter(Constants.INSTANCE.str_emoji_id, mStickerId)                    .setPriority(Priority.MEDIUM)                    .build()                    .getAsObject(CommonResponse::class.java, object : ParsedRequestListener<CommonResponse> {                        override fun onResponse(response: CommonResponse?) {                            val gson =  Gson();                            Log.i("response",  gson.toJson(response))                            var mSuccess = false                            if (response != null)                                if (response.status!!.success == (Constants.INSTANCE.one)) {                                    mSuccess = true                                }                            if (mSuccess) {                            } else {                                try {                                    CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                                } catch (e: Exception) {                                    e.printStackTrace()                                    CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                                }                            }                        }                        override fun onError(anError: ANError) {                            Log.i("error", anError.toString())                        }                    })        }    }    private fun setRecentStickerApdapter() {        if (mRecentStickersList != null && mRecentStickersList.size > 0)            mRecentStickersList.clear()        mRecentStickersList = (mDatabase!!.userDao().recentStickersList as ArrayList<RecentStickerList>?)!!        if (mRecentStickersList != null && mRecentStickersList.size > 0) {            mStickersAdapter = RecentStickersAdapter(context!!, mRecentStickersList, this@RecentAndPopularFragment)            rvRecent!!.adapter = mStickersAdapter            mStickersAdapter!!.notifyDataSetChanged()            rvRecent!!.visibility = View.VISIBLE            rlRecentEmpty!!.visibility = View.GONE        } else {            rvRecent!!.visibility = View.GONE            rlRecentEmpty!!.visibility = View.VISIBLE        }    }//RecentStickerClicked===========================================================================================================================================================    override fun mRecentStickerClicked(context: Context?, position: Int, result: RecentStickerList?, mShareOrNot: String?, bitmap: Bitmap?, mImageVIew: ImageView?) {        if (!TextUtils.isEmpty(mShareOrNot) && mShareOrNot.equals("0")) {            //ShareImage            if (result!!.is_gender_available.equals("0")) {                shareImageRecent(result.image, result.id!!,result!!)            } else {                if (result.genderSticker.equals("ML")) {                    shareImageRecent(result.img_m_light, result.id!!,result!!)                } else if (result.genderSticker.equals("MM")) {                    shareImageRecent(result.img_m_medium, result.id!!,result!!)                } else if (result.genderSticker.equals("MD")) {                    shareImageRecent(result.img_m_dark, result.id!!,result!!)                } else if (result.genderSticker.equals("FL")) {                    shareImageRecent(result.img_f_light, result.id!!,result!!)                } else if (result.genderSticker.equals("FM")) {                    shareImageRecent(result.img_f_medium, result.id!!,result!!)                } else if (result.genderSticker.equals("FD")) {                    shareImageRecent(result.img_f_dark, result.id!!,result!!)                }            }        } else {            goToStudioModeRecent(result, mImageVIew)        }    }    private fun goToStudioModeRecent(data: RecentStickerList?, mImageView: ImageView?) {        if (data!!.is_gender_available.equals("0") && data!!.is_studiomode.equals("0")) {        } else {            val quickAction: QuickAction            QuickAction.setDefaultColor(ResourcesCompat.getColor(context!!.resources, R.color.colorPrimary, null))            QuickAction.setDefaultTextColor(Color.BLACK)            val light = ActionItem(0, "", R.color.dark)            val medium = ActionItem(1, "", R.color.medium)            val dark = ActionItem(2, "", R.color.light)            val gender = ActionItem(3, "", R.drawable.gender_popup_new)            val studiomode = ActionItem(4, "", R.drawable.studiomode_popup_new)            light.isSticky = true            medium.isSticky = true            dark.isSticky = true            gender.isSticky = true            studiomode.isSticky = true            quickAction = QuickAction(context!!, QuickAction.HORIZONTAL)            quickAction.setColorRes(R.color.white)            if (data.is_gender_available.equals("0") && data.is_studiomode.equals("1")) {                quickAction.addActionItem(studiomode)            } else if (data.is_gender_available.equals("1") && data.is_studiomode.equals("0")) {                quickAction.addActionItem(light)                quickAction.addActionItem(medium)                quickAction.addActionItem(dark)                quickAction.addActionItem(gender)            } else {                quickAction.addActionItem(light)                quickAction.addActionItem(medium)                quickAction.addActionItem(dark)                quickAction.addActionItem(gender)                quickAction.addActionItem(studiomode)            }            quickAction.setOnActionItemClickListener { item ->                val mActionId = item.actionId                if (mActionId == 0) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", data.genderSticker)                    }                } else if (mActionId == 1) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", data.genderSticker)                    }                } else if (mActionId == 2) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", data.genderSticker)                    }                    if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", data.genderSticker)                    }                } else if (mActionId == 3) {                    if (data.genderSticker.equals("ML")) {                        Glide.with(context!!).load(data.img_f_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FL"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("MM")) {                        Glide.with(context!!).load(data.img_f_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FM"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("MD")) {                        Glide.with(context!!).load(data.img_f_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "FD"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("FL")) {                        Glide.with(context!!).load(data.img_m_light).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "ML"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("FM")) {                        Glide.with(context!!).load(data.img_m_medium).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MM"                        Log.i("gender", data.genderSticker)                    } else if (data.genderSticker.equals("FD")) {                        Glide.with(context!!).load(data.img_m_dark).error(R.drawable.photos).into(mImageView!!)                        data.genderSticker = "MD"                        Log.i("gender", data.genderSticker)                    }                } else if (mActionId == 4) {                    if (data.is_gender_available.equals("0")) {                        goToApp(data.image!!, data.id!!, data.text_limit!!)                    } else {                        if (data.genderSticker.equals("ML")) {                            goToApp(data.img_m_light!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("MM")) {                            goToApp(data.img_m_medium!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("MD")) {                            goToApp(data.img_m_dark!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("FL")) {                            goToApp(data.img_f_light!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("FM")) {                            goToApp(data.img_f_medium!!, data.id!!, data.text_limit!!)                        }                        if (data.genderSticker.equals("FD")) {                            goToApp(data.img_f_dark!!, data.id!!, data.text_limit!!)                        }                    }                }            }            quickAction.setOnDismissListener {}            quickAction.show(mImageView)        }    }    private fun shareImageRecent(image: String?, mStickerId: String?,result: RecentStickerList?) {        GlideApp.with(this)                .asBitmap()                .load(image)                .listener(object : RequestListener<Bitmap> {                    override fun onLoadFailed(                            e: GlideException?,                            model: Any?,                            target: com.bumptech.glide.request.target.Target<Bitmap>?,                            isFirstResource: Boolean                    ): Boolean {                        return false                    }                    override fun onResourceReady(                            bitmap: Bitmap?,                            model: Any?,                            target: com.bumptech.glide.request.target.Target<Bitmap>?,                            dataSource: com.bumptech.glide.load.DataSource?,                            isFirstResource: Boolean                    ): Boolean {                        shareBitmap(bitmap!!, image!!)                        return false                    }                }).priority(com.bumptech.glide.Priority.IMMEDIATE)                .submit()        //Emoji useg webservice        if (CheckConnection.getInstance(requireActivity()).isConnectingToInternet()) {            callStickerUseWs(mStickerId!!)        } else {            CustomDialog.instance!!.showalert(requireActivity()!!, resources.getString(R.string.check_internet_connection))        }    }//========================================================================================================================================================================}