package com.naijamojiapp.app.fragmentimport android.app.Activity.RESULT_OKimport android.app.Dialogimport android.content.Intentimport android.os.Bundleimport android.text.TextUtilsimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.view.Windowimport android.widget.*import androidx.fragment.app.Fragmentimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.facebook.CallbackManagerimport com.facebook.FacebookCallbackimport com.facebook.FacebookExceptionimport com.facebook.GraphRequestimport com.facebook.login.LoginBehaviorimport com.facebook.login.LoginManagerimport com.facebook.login.LoginResultimport com.google.android.gms.auth.api.Authimport com.google.android.gms.auth.api.signin.GoogleSignInimport com.google.android.gms.auth.api.signin.GoogleSignInOptionsimport com.google.android.gms.common.ConnectionResultimport com.google.android.gms.common.api.ApiExceptionimport com.google.android.gms.common.api.GoogleApiClientimport com.google.gson.Gsonimport com.naijamojiapp.Rimport com.naijamojiapp.app.activity.HomeActivityimport com.naijamojiapp.app.activity.LoginActivityimport com.naijamojiapp.app.activity.SelectGenderActivityimport com.naijamojiapp.app.activity.SignUpActivityimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.response.CheckAlreadyLoginOrNotResponseimport com.naijamojiapp.app.response.SignUpResponseimport com.naijamojiapp.app.response.SocialLoginSignUpResponseimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.Preferencesimport org.json.JSONObjectclass SignUpFragment : Fragment(), View.OnClickListener, GoogleApiClient.OnConnectionFailedListener,        GoogleApiClient.ConnectionCallbacks {    var tvLoginGoogle: TextView? = null    var tvLoginFb: TextView? = null    // var llLoginFb: LinearLayout? = null    var llLoginNormal: LinearLayout? = null    //facebook and google    var mApiClient: GoogleApiClient? = null    var gso: GoogleSignInOptions? = null    var callbackManager: CallbackManager? = null    var mSocialID = ""    var mSocialName = ""    var mSocialLName = ""    var mSocialGender = ""    var mSocialEmail = ""    var mSocialProfile: String? = ""    var calledOnce = false    var edtEmail: EditText? = null    companion object {        fun newInstance(): SignUpFragment {            val fragment = SignUpFragment()            val args = Bundle()            fragment.arguments = args            return fragment        }    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,                              savedInstanceState: Bundle?): View? {        // Inflate the layout for this fragment        val view = inflater.inflate(R.layout.fragment_signup, container, false)      //  LoginManager.getInstance().setLoginBehavior(LoginBehavior.WEB_VIEW_ONLY);        callbackManager = CallbackManager.Factory.create()        gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)                .requestEmail()                .build()        mApiClient = GoogleApiClient.Builder(activity!!)                .addConnectionCallbacks(this)                .addOnConnectionFailedListener(this)                .addApi(Auth.GOOGLE_SIGN_IN_API, gso!!)                .build()        init(view)        return view    }    private fun init(view: View) {        tvLoginGoogle = view.findViewById(R.id.tv_login_google)        tvLoginGoogle!!.setOnClickListener(this)        tvLoginFb = view.findViewById(R.id.tv_login_fb)        tvLoginFb!!.setOnClickListener(this)        llLoginNormal = view.findViewById(R.id.linear_login_normal)        llLoginNormal!!.setOnClickListener(this)    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.linear_login_normal -> {                startActivity(Intent(activity, SignUpActivity::class.java))            }            R.id.tv_login_fb -> {                if (CheckConnection.getInstance(activity).isConnectingToInternet()) {                    LoginManager.getInstance().logInWithReadPermissions(this, Constants.INSTANCE.getPermissions())                    registerLoginCallback()                } else {                    CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))                }            }            R.id.tv_login_google -> {                try {                    if (mApiClient != null) {                        if (mApiClient!!.isConnected()) {                            val intent = Auth.GoogleSignInApi.getSignInIntent(mApiClient!!)                            startActivityForResult(intent, 25)                        } else {                            mApiClient!!.connect()                        }                    }                } catch (e: Exception) {                    e.printStackTrace()                }            }        }    }    //Facebook Login/Signup    private fun registerLoginCallback() {        LoginManager.getInstance().registerCallback(callbackManager, object : FacebookCallback<LoginResult> {            override fun onSuccess(result: LoginResult) {                if (result.accessToken != null) {                    val request = GraphRequest.newMeRequest(result.accessToken                    ) { `object`, response ->                        Log.e("response_main_fb: ", (response).toString() + "")                        try {                            if (response!!.connection!!.responseCode == 200) {                                if (`object`!!.has("id")) {                                    mSocialID = `object`.getString("id")                                }                                if (`object`.has("first_name")) {                                    mSocialName = `object`.getString("first_name")                                    Log.i("username", `object`.getString("first_name"))                                }                                if (`object`.has("last_name")) {                                    mSocialLName = `object`.getString("last_name")                                    Log.i("usernamelast", `object`.getString("last_name"))                                }                                if (`object`.has("gender")) {                                    mSocialGender = `object`.getString("gender")                                    Log.i("gender", `object`.getString("gender"))                                }                                if (`object`.has("email")) {                                    mSocialEmail = `object`.getString("email")                                }                             /*   val ObjProfile = JSONObject(`object`.getString("profile"))                                if (ObjProfile.getJSONObject("data").has("url")) {                                    Log.e("tagUrl", "fb url is " + ObjProfile.getJSONObject("data").has("url"))                                    mSocialProfile = ObjProfile.getJSONObject("data").getString("url")                                }*/                                if(mSocialEmail != null && !TextUtils.isEmpty(mSocialEmail)){                                    if (CheckConnection.getInstance(activity).isConnectingToInternet()) {//                                        callSocialWs("fb")                                        callUsarAlreadyLoginOrNotWs("FB")                                        Log.i("fbData", "CALL")                                    } else {                                        CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))                                        Log.i("fbData", "CALL1")                                    }                                }else{                                    showMailDialog()                                    Log.i("fbData", "CALL2")                                }                                LoginManager.getInstance().logOut()                            } else                                Toast.makeText(activity, getString(R.string.error_message), Toast.LENGTH_SHORT).show()                        } catch (e: Exception) {                        }                    }                    val parameters = Bundle()                    parameters.putString("fields", "id,first_name,last_name,gender,email,picture.type(large)")                    request.parameters = parameters                    request.executeAsync()                } else                    Toast.makeText(activity, getString(R.string.error_message), Toast.LENGTH_SHORT).show()            }            override fun onError(error: FacebookException) {}            override fun onCancel() {}        })    }    private fun showMailDialog() {        val dialog = Dialog(context!!)        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)        dialog.window!!.setBackgroundDrawableResource(android.R.color.transparent)        dialog.setContentView(R.layout.dialog_enter_mail)        dialog.setCanceledOnTouchOutside(false)        dialog.setCancelable(false)        edtEmail = dialog.findViewById(R.id.edt_email)        val btnSave = dialog.findViewById<View>(R.id.btn_save)        btnSave.setOnClickListener{            if (CheckConnection.getInstance(activity!!).isConnectingToInternet()) {                if (isValid()) {                    mSocialEmail = edtEmail!!.text.toString()                    dialog.dismiss()//                    callSocialWs("fb")                    callUsarAlreadyLoginOrNotWs("FB")                }            } else {                dialog.dismiss()                CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))            }        }        dialog.show()    }    private fun isValid(): Boolean {        if (TextUtils.isEmpty(edtEmail!!.getText().toString())) {            CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.please_enter_email))            return false        } else {            edtEmail!!.setError(null)        }        if (!Constants.INSTANCE.isValidEmail(edtEmail!!.getText().toString())) {            CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.please_enter_valid_email))            return false        } else {            edtEmail!!.setError(null)        }        return true    }     override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        callbackManager!!.onActivityResult(requestCode, resultCode, data)        if (resultCode != RESULT_OK)            return        when (requestCode) {            101 -> try {                val task = GoogleSignIn.getSignedInAccountFromIntent(data)                //val account = task.getResult(ApiException::class.java)            } catch (e: ApiException) {                //Log.w(TAG, "signInResult:failed code=" + e.statusCode)            }            25 -> {                val result = Auth.GoogleSignInApi.getSignInResultFromIntent(data!!)                if (result!!.isSuccess) {                    val account = result.signInAccount                    mSocialID = account!!.id.toString()                    mSocialName = account.givenName.toString()                    mSocialLName = account.familyName.toString()                    mSocialEmail = account.email.toString()                    try {                        if (mSocialProfile != null) {                            mSocialProfile = account.photoUrl!!.toString()                        }                    } catch (e: Exception) {                        e.printStackTrace()                    }                    Log.i("googleLoginData", account.toString())                    if (CheckConnection.getInstance(activity!!).isConnectingToInternet()) {//                        callSocialWs("google")                        callUsarAlreadyLoginOrNotWs("GOOGLE")                    } else {                        CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))                    }                    //startActivity(Intent(activity, LoginActivity::class.java))                }            }        }    }    //Social Login and SignUp webservicecall(fb/google)    private fun callUsarAlreadyLoginOrNotWs(type: String) {        val progressDialog = CustomProgressDialog(activity!!, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_check_social_account)                .addBodyParameter(Constants.INSTANCE.str_social_id, mSocialID)                .addBodyParameter(Constants.INSTANCE.str_login_type, type)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(CheckAlreadyLoginOrNotResponse::class.java, object :                        ParsedRequestListener<CheckAlreadyLoginOrNotResponse> {                    override fun onResponse(response: CheckAlreadyLoginOrNotResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            if(response!!.status!!.is_login.equals("0")){                                //New user                                if (CheckConnection.getInstance(activity).isConnectingToInternet()) {                                    val intent = Intent(activity, SelectGenderActivity::class.java)                                    intent.putExtra("fname", mSocialName)                                    intent.putExtra("lname", mSocialLName)                                    intent.putExtra("email", mSocialEmail)                                    intent.putExtra("type",type)                                    intent.putExtra("social_id",mSocialID)                                    intent.putExtra("isSocial","1")                                    startActivity(intent)                                } else {                                    CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))                                }                            }else{                                //Alredy login user                                if (CheckConnection.getInstance(activity).isConnectingToInternet()) {                                    callSocialWs(type,response.status!!.result!!.skin_tone!!,response.status!!.result!!.gender!!)                                } else {                                    CustomDialog.instance!!.showalert(activity!!, resources.getString(R.string.check_internet_connection))                                }                            }                        } else {                            try {                                CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    //Social Login and SignUp webservicecall(fb/google)    private fun callSocialWs(type: String, mSkinTone : String , mGender : String) {        val progressDialog = CustomProgressDialog(activity!!, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_social_insert)                .addBodyParameter(Constants.INSTANCE.str_social_id, mSocialID)                .addBodyParameter(Constants.INSTANCE.str_login_type, type)                .addBodyParameter(Constants.INSTANCE.str_first_name, mSocialName)                .addBodyParameter(Constants.INSTANCE.str_last_name, mSocialLName)                .addBodyParameter(Constants.INSTANCE.str_email, mSocialEmail)                .addBodyParameter(Constants.INSTANCE.str_gender, mGender)                .addBodyParameter(Constants.INSTANCE.str_skin_tone, mSkinTone)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(SocialLoginSignUpResponse::class.java, object : ParsedRequestListener<SocialLoginSignUpResponse> {                    override fun onResponse(response: SocialLoginSignUpResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            SaveCredential(response)                        } else {                            try {                                CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(activity!!, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    private fun SaveCredential(response: SocialLoginSignUpResponse?) {        val gson = Gson()        val json = gson.toJson(response)        Preferences.INSTANCE?.setLoginObject(json)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_ID, response?.status!!.result?.id)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_FIREST_NAME, response?.status!!.result?.first_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_LAST_NAME, response?.status!!.result?.last_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_EMAIL, response?.status!!.result?.email)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_GENDER, response?.status!!.result?.gender)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_SKINTONE, response?.status!!.result?.skin_tone)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.LOGIN_TYPE, response?.status!!.result?.login_type)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.TOKEN, response?.status!!.result?.token)        Preferences.INSTANCE?.loginStatus = true        val intent = Intent(activity!!, HomeActivity::class.java)        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)        startActivity(intent)        activity!!.finish()    }    override fun onConnected(p0: Bundle?) {        if (!calledOnce) {            calledOnce = true            callGoogleAccountSelection()        }    }    private fun callGoogleAccountSelection() {        try {            if (mApiClient != null) {                if (mApiClient!!.isConnected()) {                    Auth.GoogleSignInApi.signOut(mApiClient!!)                    mApiClient!!.clearDefaultAccountAndReconnect().setResultCallback {                        val intent = Auth.GoogleSignInApi.getSignInIntent(mApiClient!!)                        startActivityForResult(intent, 25)                    }                }            }        } catch (e: Exception) {        }    }    override fun onConnectionFailed(p0: ConnectionResult) {}    override fun onConnectionSuspended(p0: Int) {}}