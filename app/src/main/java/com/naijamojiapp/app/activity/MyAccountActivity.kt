package com.naijamojiapp.app.activityimport android.app.AlertDialogimport android.app.DatePickerDialogimport android.content.Intentimport android.os.Bundleimport android.text.TextUtilsimport android.util.Logimport android.view.Viewimport android.view.Windowimport android.view.WindowManagerimport android.widget.*import androidx.appcompat.app.AppCompatActivityimport androidx.core.content.ContextCompatimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.google.gson.Gsonimport com.naijamojiapp.Rimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.response.CommonResponseimport com.naijamojiapp.app.response.ProfileResponseimport com.naijamojiapp.app.roomDB.AppDatabaseimport com.naijamojiapp.app.sqlitedb.DatabaseHelperimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.Preferencesimport com.naijamojiapp.app.utils.Utilityimport java.util.*class MyAccountActivity : AppCompatActivity(), View.OnClickListener {    var rlBack: RelativeLayout? = null    var rlClearHistory: RelativeLayout? = null    var rlDeleteAccount: RelativeLayout? = null    var rlChangePassword: RelativeLayout? = null    var llUpdate: LinearLayout? = null    var btnUpdate: Button? = null    lateinit var database: DatabaseHelper    var edtFname: EditText? = null    var edtLname: EditText? = null    var tvDob: TextView? = null    var tvEmail: TextView? = null    var mGender: String? = ""    var mSkinTone: String? = ""    var mDOB: String? = ""    var mDatabase: AppDatabase? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        Utility.instance!!.setTopBar(this,window)        setContentView(R.layout.activity_my_account)        if (CheckConnection.getInstance(this).isConnectingToInternet()) {            callGetProfileWs()        } else {            CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))        }        init()    }    private fun init() {        mDatabase = AppDatabase.getDatabaseInstance(this@MyAccountActivity)        rlBack = findViewById(R.id.rl_back)        rlBack!!.setOnClickListener(this)        rlClearHistory = findViewById(R.id.rl_clear_history)        rlClearHistory!!.setOnClickListener(this)        rlDeleteAccount = findViewById(R.id.rl_delete_account)        rlDeleteAccount!!.setOnClickListener(this)        rlChangePassword = findViewById(R.id.rlChangePassword)        rlChangePassword!!.setOnClickListener(this)        llUpdate = findViewById(R.id.ll_update)        llUpdate!!.setOnClickListener(this)        btnUpdate = findViewById(R.id.btn_update)        btnUpdate!!.setOnClickListener(this)        edtFname = findViewById(R.id.edt_fname)        edtLname = findViewById(R.id.edt_lname)        tvEmail = findViewById(R.id.tvEmail)        tvDob = findViewById(R.id.tvDob)        tvDob!!.setOnClickListener(this)        if (Preferences.INSTANCE!!.loginType.equals("APP")) {            rlChangePassword!!.visibility = View.VISIBLE        } else {            rlChangePassword!!.visibility = View.GONE        }        //  database = DatabaseHelper(this@MyAccountActivity)    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.rl_back -> {                finish()            }            R.id.rl_delete_account -> {                mShowDialogForDeleteAccount()            }            R.id.rl_clear_history -> {                mShowDialogForClearHistory()            }            R.id.rlChangePassword -> {                startActivity(Intent(this, ChangePasswordActivity::class.java))            }            R.id.tvDob -> {                val calendar = Calendar.getInstance()                val year = calendar.get(Calendar.YEAR)                val month = calendar.get(Calendar.MONTH)                val day = calendar.get(Calendar.DAY_OF_MONTH)                val dpd = DatePickerDialog(this, DatePickerDialog.OnDateSetListener { view, year, monthOfYear, dayOfMonth ->                    // Display Selected date in textbox                    if (onDateSet(view, year, monthOfYear, dayOfMonth)!!) {                        CustomDialog.instance!!.showalert(this@MyAccountActivity, resources.getString(R.string.age_validation))                    } else {                        mDOB = Utility.instance!!.mDatePickerDateformatChange(dayOfMonth.toString() + "/" + (monthOfYear + 1) + "/" + year)                        tvDob!!.text = Utility.instance!!.simpleDateConvertDob(mDOB!!)                    }                }, year, month, day)                calendar.timeInMillis = System.currentTimeMillis() - 1000                dpd.datePicker.maxDate = calendar.timeInMillis                dpd.show()            }            R.id.btn_update -> {                if (CheckConnection.getInstance(this).isConnectingToInternet()) {                    if(isValid()){                        callUpdateProfileWs()                    }                } else {                    CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))                }            }        }    }    fun onDateSet(view: DatePicker?, year: Int, month: Int, day: Int): Boolean? {        val userAge: Calendar = GregorianCalendar(year, month, day)        val minAdultAge: Calendar = GregorianCalendar()        minAdultAge.add(Calendar.YEAR, -18)        if (minAdultAge.before(userAge)) {            return true        }        return false    }    private fun mShowDialogForClearHistory() {        val builder = AlertDialog.Builder(this)        builder.setMessage("Are you sure you want to clear history ?")        builder.setPositiveButton("YES") { dialog, which ->            //database.deleteTable()            mDatabase!!.userDao().deleteRecentTable()            CustomDialog.instance!!.showalert(this, resources.getString(R.string.successfully_clear_history))            finish()        }        builder.setNegativeButton("NO") { dialog, which ->            dialog.dismiss()        }        builder.create().show()    }    private fun mShowDialogForDeleteAccount() {        val builder = AlertDialog.Builder(this)        builder.setMessage("Are you sure you want to delete account ?")        builder.setPositiveButton("YES") { dialog, which ->            if (CheckConnection.getInstance(this).isConnectingToInternet()) {                callDeleteUserWs()            } else {                CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))            }        }        builder.setNegativeButton("NO") { dialog, which ->            dialog.dismiss()        }        builder.create().show()    }    //GetProfile    private fun callDeleteUserWs() {        val progressDialog = CustomProgressDialog(this@MyAccountActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_delete_user)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(CommonResponse::class.java, object : ParsedRequestListener<CommonResponse> {                    override fun onResponse(response: CommonResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            //database.deleteTable()                            mDatabase!!.userDao().deleteRecentTable()                            val intent = Intent(this@MyAccountActivity, LoginActivity::class.java)                            intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)                            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)                            Preferences.INSTANCE!!.ClearPrefsValue()                            startActivity(intent)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@MyAccountActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@MyAccountActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    //GetProfile    private fun callGetProfileWs() {        val progressDialog = CustomProgressDialog(this@MyAccountActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_get_profile)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(ProfileResponse::class.java, object : ParsedRequestListener<ProfileResponse> {                    override fun onResponse(response: ProfileResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            setProfile(response)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@MyAccountActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@MyAccountActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    //UpdateProfile    private fun callUpdateProfileWs() {        Log.d("Print dob","===>"+mDOB);        val progressDialog = CustomProgressDialog(this@MyAccountActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_edit_profile)                .addBodyParameter(Constants.INSTANCE.str_f_name, edtFname!!.text.toString())                .addBodyParameter(Constants.INSTANCE.str_last_name, edtLname!!.text.toString())                .addBodyParameter(Constants.INSTANCE.str_gender, mGender)                .addBodyParameter(Constants.INSTANCE.str_skin_tone, mSkinTone)                .addBodyParameter(Constants.INSTANCE.str_dob, mDOB)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(ProfileResponse::class.java, object : ParsedRequestListener<ProfileResponse> {                    override fun onResponse(response: ProfileResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            SaveCredential(response!!)                            setProfile(response)                            CustomDialog.instance!!.showalert(this@MyAccountActivity, response.status!!.message!!)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@MyAccountActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@MyAccountActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.errorBody)                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    private fun SaveCredential(response: ProfileResponse?) {        val gson = Gson()        val json = gson.toJson(response)        Preferences.INSTANCE?.setLoginObject(json)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_ID, response?.status!!.result?.id)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_FIREST_NAME, response?.status!!.result?.first_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_LAST_NAME, response?.status!!.result?.last_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_EMAIL, response?.status!!.result?.email)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_GENDER, response?.status!!.result?.gender)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_SKINTONE, response?.status!!.result?.skin_tone)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.LOGIN_TYPE, response?.status!!.result?.login_type)    }    private fun setProfile(response: ProfileResponse?) {        edtFname!!.setText(response!!.status!!.result!!.first_name)        edtLname!!.setText(response.status!!.result!!.last_name)        mDOB = Utility.instance!!.mDatePickerDateformatChange(response.status!!.result!!.birth_date!!)        tvDob!!.text = Utility.instance!!.simpleDateConvertDob(mDOB!!)        tvEmail!!.setText(response.status!!.result!!.email)        //SetGender        if (response.status!!.result!!.gender != null && !TextUtils.isEmpty(response.status!!.result!!.gender)) {            if (response.status!!.result!!.gender!!.toUpperCase().equals("M")) {                mGender = "M"            } else {                mGender = "F"            }        } else {            mGender = ""        }        //SetSkinTone        if (response.status!!.result!!.skin_tone != null && !TextUtils.isEmpty(response.status!!.result!!.skin_tone)) {            if (response.status!!.result!!.skin_tone.equals("L")) {                mSkinTone = "L"            } else if (response.status!!.result!!.skin_tone.equals("M")) {                mSkinTone = "M"            } else {                mSkinTone = "D"            }        } else {            mSkinTone = ""        }    }    private fun isValid(): Boolean {        if (TextUtils.isEmpty(edtFname!!.getText().toString())) {            CustomDialog.instance!!.showalert(this@MyAccountActivity, resources.getString(R.string.please_enter_fname))            return false        } else {            edtFname!!.setError(null)        }        if (TextUtils.isEmpty(edtLname!!.getText().toString())) {            CustomDialog.instance!!.showalert(this@MyAccountActivity, resources.getString(R.string.please_enter_lname))            return false        } else {            edtLname!!.setError(null)        }        if (TextUtils.isEmpty(mDOB)) {            CustomDialog.instance!!.showalert(this@MyAccountActivity, resources.getString(R.string.please_select_birthdate))            return false        }        return true    }}