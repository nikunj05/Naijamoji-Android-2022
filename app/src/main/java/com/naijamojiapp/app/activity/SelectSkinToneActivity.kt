package com.naijamojiapp.app.activityimport android.content.Intentimport android.os.Bundleimport android.text.TextUtilsimport android.util.Logimport android.view.Viewimport android.view.Windowimport android.view.WindowManagerimport android.view.animation.AnimationSetimport android.view.animation.AnimationUtilsimport android.widget.*import androidx.appcompat.app.AppCompatActivityimport androidx.core.content.ContextCompatimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.google.gson.Gsonimport com.naijamojiapp.Rimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.gender.AvatarGenderClipViewimport com.naijamojiapp.app.gender.SpringInterpolatorimport com.naijamojiapp.app.response.SignUpResponseimport com.naijamojiapp.app.response.SocialLoginSignUpResponseimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.Preferencesimport com.naijamojiapp.app.utils.Utilityclass SelectSkinToneActivity : AppCompatActivity(), View.OnClickListener {    var rlBack: RelativeLayout? = null   //user Details    var mFname : String = ""    var mLname : String = ""    var mEmailId: String = ""    var mPassword: String = ""    var mGender: String = ""    var mSkinTone: String? = ""    var mSocialId: String = ""    var mIsSocial: String = ""    var mSocialLogintype: String = ""    var llDone: LinearLayout? = null    var btnDone: Button? = null    var mBirthdate: String = ""    var rlSelectLight: RelativeLayout? = null    var rlSelectMedium: RelativeLayout? = null    var rlSelectDark: RelativeLayout? = null    var rlLight: RelativeLayout? = null    var rlMedium: RelativeLayout? = null    var rlDark: RelativeLayout? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        Utility.instance!!.setTopBar(this,window)        setContentView(R.layout.activity_select_skintone)        if (intent != null) {            if (intent.extras != null) {                if (intent.extras!!.containsKey("isSocial")) {                    if (!TextUtils.isEmpty(intent.extras!!.getString("isSocial"))) {                        if(intent.extras!!.getString("isSocial").equals("0")){                            //Normal                            mFname = intent.extras!!.getString("fname")!!                            mLname = intent.extras!!.getString("lname")!!                            mEmailId = intent.extras!!.getString("email")!!                            mPassword = intent.extras!!.getString("password")!!                            mIsSocial = intent.extras!!.getString("isSocial")!!                            mGender = intent.extras!!.getString("gender")!!                            mBirthdate = intent.extras!!.getString("birthdate")!!                        }else{                            //isSocial                            mFname = intent.extras!!.getString("fname")!!                            mLname = intent.extras!!.getString("lname")!!                            mEmailId = intent.extras!!.getString("email")!!                            mSocialLogintype = intent.extras!!.getString("type")!!                            mSocialId = intent.extras!!.getString("social_id")!!                            mIsSocial = intent.extras!!.getString("isSocial")!!                            mGender = intent.extras!!.getString("gender")!!                            mBirthdate = ""                        }                    }                }               /* if (intent.extras!!.containsKey("fname")) {                    if (!TextUtils.isEmpty(intent.extras!!.getString("fname"))) {                        mFname = intent.extras!!.getString("fname")                        mLname = intent.extras!!.getString("lname")                        mEmailId = intent.extras!!.getString("email")                        mPassword = intent.extras!!.getString("password")//                        if(!TextUtils.isEmpty(mPassword)){ }                        mGender = intent.extras!!.getString("gender")                        if(!TextUtils.isEmpty(intent.extras!!.getString("type"))){                            mSocialLogintype = intent.extras!!.getString("type")                            mSocialId = intent.extras!!.getString("social_id")                            mIsSocial = intent.extras!!.getString("isSocial")                        }                    }                }*/            }        }        init()    }    private fun init() {        rlBack = findViewById(R.id.rl_back)        rlBack!!.setOnClickListener(this)        //SkinTone        rlSelectLight = findViewById(R.id.rl_select_light)        rlSelectLight!!.setOnClickListener(this)        rlSelectLight!!.setTag("0")        rlSelectMedium = findViewById(R.id.rl_select_medium)        rlSelectMedium!!.setOnClickListener(this)        rlSelectMedium!!.setTag("0")        rlSelectDark = findViewById(R.id.rl_select_dark)        rlSelectDark!!.setOnClickListener(this)        rlSelectDark!!.setTag("0")        rlLight = findViewById(R.id.rl_light)        rlMedium = findViewById(R.id.rl_medium)        rlDark = findViewById(R.id.rl_dark)        mSkinTone = "L"        rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))        rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))        rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))        llDone = findViewById(R.id.ll_done)        llDone!!.setOnClickListener(this)        btnDone = findViewById(R.id.btn_done)        btnDone!!.setOnClickListener(this)    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.rl_back -> {                finish()            }            R.id.rl_select_light -> {                if (rlSelectLight!!.getTag().equals("0")) {                    mSkinTone = "L"                    rlSelectLight!!.setTag("1")                    rlSelectMedium!!.setTag("0")                    rlSelectDark!!.setTag("0")                    rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))                    rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                    rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                }            }            R.id.rl_select_medium -> {                if (rlSelectMedium!!.getTag().equals("0")) {                    mSkinTone = "M"                    rlSelectLight!!.setTag("0")                    rlSelectMedium!!.setTag("1")                    rlSelectDark!!.setTag("0")                    rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                    rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))                    rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                }            }            R.id.rl_select_dark -> {                if (rlSelectDark!!.getTag().equals("0")) {                    mSkinTone = "D"                    rlSelectLight!!.setTag("0")                    rlSelectMedium!!.setTag("0")                    rlSelectDark!!.setTag("1")                    rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                    rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                    rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))                }            }            R.id.btn_done-> {                if(mIsSocial.equals("1")){                    if (CheckConnection.getInstance(this@SelectSkinToneActivity).isConnectingToInternet()) {                        callSocialWs()                    } else {                        CustomDialog.instance!!.showalert(this@SelectSkinToneActivity!!, resources.getString(R.string.check_internet_connection))                    }                }else{                    if (CheckConnection.getInstance(this).isConnectingToInternet()) {                        callSignUpWs("APP")                    } else {                        CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))                    }                }            }            R.id.ll_done -> {                if(mIsSocial.equals("1")){                    if (CheckConnection.getInstance(this@SelectSkinToneActivity).isConnectingToInternet()) {                        callSocialWs()                    } else {                        CustomDialog.instance!!.showalert(this@SelectSkinToneActivity!!, resources.getString(R.string.check_internet_connection))                    }                }else{                    if (CheckConnection.getInstance(this).isConnectingToInternet()) {                        callSignUpWs("APP")                    } else {                        CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))                    }                }            }        }    }    //For normal signUp    private fun callSignUpWs(mLoginType : String) {        val progressDialog = CustomProgressDialog(this@SelectSkinToneActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_signup)                .addBodyParameter(Constants.INSTANCE.str_first_name, mFname)                .addBodyParameter(Constants.INSTANCE.str_last_name, mLname)                .addBodyParameter(Constants.INSTANCE.str_email, mEmailId)                .addBodyParameter(Constants.INSTANCE.str_password, mPassword)                .addBodyParameter(Constants.INSTANCE.str_gender, mGender)                .addBodyParameter(Constants.INSTANCE.str_skin_tone, mSkinTone)                .addBodyParameter(Constants.INSTANCE.str_dob, mBirthdate)                .addBodyParameter(Constants.INSTANCE.str_login_type, mLoginType)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(SignUpResponse::class.java, object : ParsedRequestListener<SignUpResponse> {                    override fun onResponse(response: SignUpResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            CustomDialog.instance!!.showalert(this@SelectSkinToneActivity, response!!.status!!.message!!)                            SaveCredential(response)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@SelectSkinToneActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@SelectSkinToneActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    //Normal    private fun SaveCredential(response: SignUpResponse) {        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_ID, response?.status!!.result?.id)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_FIREST_NAME, response?.status!!.result?.first_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_LAST_NAME, response?.status!!.result?.last_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_EMAIL, response?.status!!.result?.email)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_GENDER, response?.status!!.result?.gender)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_SKINTONE, response?.status!!.result?.skin_tone)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.LOGIN_TYPE, response?.status!!.result?.login_type)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.TOKEN, response?.status!!.result?.token)        Preferences.INSTANCE?.loginStatus = true        val intent = Intent(this@SelectSkinToneActivity, HomeActivity::class.java)        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)        startActivity(intent)        finish()    }    //Social Login and SignUp webservicecall(fb/google)    private fun callSocialWs() {        val progressDialog = CustomProgressDialog(this@SelectSkinToneActivity!!, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_social_insert)                .addBodyParameter(Constants.INSTANCE.str_social_id, mSocialId)                .addBodyParameter(Constants.INSTANCE.str_login_type, mSocialLogintype)                .addBodyParameter(Constants.INSTANCE.str_first_name, mFname)                .addBodyParameter(Constants.INSTANCE.str_last_name, mLname)                .addBodyParameter(Constants.INSTANCE.str_email, mEmailId)                .addBodyParameter(Constants.INSTANCE.str_gender, mGender)                .addBodyParameter(Constants.INSTANCE.str_skin_tone, mSkinTone)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(SocialLoginSignUpResponse::class.java, object : ParsedRequestListener<SocialLoginSignUpResponse> {                    override fun onResponse(response: SocialLoginSignUpResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            SaveCredential(response!!)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@SelectSkinToneActivity!!, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@SelectSkinToneActivity!!, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    //Social    private fun SaveCredential(response: SocialLoginSignUpResponse?) {        val gson = Gson()        val json = gson.toJson(response)        Preferences.INSTANCE?.setLoginObject(json)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_ID, response?.status!!.result?.id)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_FIREST_NAME, response?.status!!.result?.first_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_LAST_NAME, response?.status!!.result?.last_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_EMAIL, response?.status!!.result?.email)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_GENDER, response?.status!!.result?.gender)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_SKINTONE, response?.status!!.result?.skin_tone)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.LOGIN_TYPE, response?.status!!.result?.login_type)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.TOKEN, response?.status!!.result?.token)        Preferences.INSTANCE?.loginStatus = true        val intent = Intent(this@SelectSkinToneActivity!!, HomeActivity::class.java)        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)        startActivity(intent)        this@SelectSkinToneActivity!!.finish()    }}