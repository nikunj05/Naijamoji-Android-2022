package com.naijamojiapp.app.activityimport android.app.Dialogimport android.content.Intentimport android.content.res.TypedArrayimport android.graphics.Bitmapimport android.os.Bundleimport android.os.Handlerimport android.text.TextUtilsimport android.util.Logimport android.view.Viewimport android.view.Windowimport android.view.WindowManagerimport android.widget.*import androidx.appcompat.app.AppCompatActivityimport androidx.swiperefreshlayout.widget.CircularProgressDrawableimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.bumptech.glide.Glideimport com.bumptech.glide.load.DataSourceimport com.bumptech.glide.load.engine.GlideExceptionimport com.bumptech.glide.request.RequestListenerimport com.facebook.CallbackManagerimport com.facebook.FacebookCallbackimport com.facebook.FacebookExceptionimport com.facebook.GraphRequestimport com.facebook.login.LoginManagerimport com.facebook.login.LoginResultimport com.google.android.gms.auth.api.Authimport com.google.android.gms.auth.api.signin.GoogleSignInimport com.google.android.gms.auth.api.signin.GoogleSignInOptionsimport com.google.android.gms.common.ConnectionResultimport com.google.android.gms.common.api.ApiExceptionimport com.google.android.gms.common.api.GoogleApiClientimport com.google.gson.Gsonimport com.naijamojiapp.Rimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.response.CheckAlreadyLoginOrNotResponseimport com.naijamojiapp.app.response.LoginResponseimport com.naijamojiapp.app.response.SocialLoginSignUpResponseimport com.naijamojiapp.app.response.newResponse.RendomImageResponseimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.CrashReportHandlerimport com.naijamojiapp.app.utils.Preferencesimport java.util.*class LoginActivity : AppCompatActivity(), View.OnClickListener, GoogleApiClient.OnConnectionFailedListener,        GoogleApiClient.ConnectionCallbacks {    var rlBack: RelativeLayout? = null    var llSignin: LinearLayout? = null    var btnSignin: Button? = null    var edtEmail: EditText? = null    var edtPassword: EditText? = null    var tvForgotPassword: TextView? = null    var tvSignUp: TextView? = null    var ivGoogle: ImageView? = null    var ivFb: ImageView? = null    var ivOne: ImageView? = null    var ivTwo: ImageView? = null    var ivThree: ImageView? = null    var mApiClient: GoogleApiClient? = null    var gso: GoogleSignInOptions? = null    var callbackManager: CallbackManager? = null    var mSocialID = ""    var mSocialName = ""    var mSocialLName = ""    var mSocialGender = ""    var mSocialEmail = ""    var mSocialProfile: String? = ""    var calledOnce = false    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        //CrashReportHandler.attach(this)        requestWindowFeature(Window.FEATURE_NO_TITLE)        window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN)        setContentView(R.layout.activity_login)        callbackManager = CallbackManager.Factory.create()        gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)                .requestEmail()                .build()        mApiClient = GoogleApiClient.Builder(this@LoginActivity)                .addConnectionCallbacks(this)                .addOnConnectionFailedListener(this)                .addApi(Auth.GOOGLE_SIGN_IN_API, gso!!)                .build()        init()    }    private fun init() {        ivOne = findViewById(R.id.ivOne)        ivTwo = findViewById(R.id.ivTwo)        ivThree = findViewById(R.id.ivThree)        ivGoogle = findViewById(R.id.ivGoogle)        ivGoogle!!.setOnClickListener(this)        ivFb = findViewById(R.id.ivFb)        ivFb!!.setOnClickListener(this)        rlBack = findViewById(R.id.rl_back)        rlBack!!.setOnClickListener(this)        btnSignin = findViewById(R.id.btn_signin)        btnSignin!!.setOnClickListener(this)        llSignin = findViewById(R.id.linear_signin)        llSignin!!.setOnClickListener(this)        edtEmail = findViewById(R.id.edt_email)        edtPassword = findViewById(R.id.edt_password)        tvForgotPassword = findViewById(R.id.tv_forgot_password)        tvForgotPassword!!.setOnClickListener(this)        tvSignUp = findViewById(R.id.tv_sign_up)        tvSignUp!!.setOnClickListener(this)        tvSignUp!!.text = getString(R.string.dont_have_account)        /* if (CheckConnection.getInstance(this).isConnectingToInternet()) {             getRendomImage()         } else {             CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))         }*/        try {            val imgs: TypedArray = resources.obtainTypedArray(R.array.apptour)            val rand = Random()            val rndIntOne: Int = rand.nextInt(imgs.length())            val rndIntTwo: Int = rand.nextInt(imgs.length())            val rndIntThree: Int = rand.nextInt(imgs.length())            val one: Int = imgs.getResourceId(rndIntOne, 0)            val two: Int = imgs.getResourceId(rndIntTwo, 0)            val three: Int = imgs.getResourceId(rndIntThree, 0)            try {                ivOne!!.setImageResource(one)                ivTwo!!.setImageResource(two)                ivThree!!.setImageResource(three)            } catch (e: java.lang.Exception) {                e.printStackTrace()            }        } catch (e: Exception) {        }        val handler = Handler() //class variable        var count = 0        handler.post(object : Runnable {            override fun run() {                updateCounter(count++)                if (count < 10 * 3000) {                    handler.postDelayed(this, 3000)                }            }        })    }    private fun updateCounter(count: Int) {        runOnUiThread {            // you have the seconds passed            // do what ever you want            try {                val imgs: TypedArray = resources.obtainTypedArray(R.array.apptour)                val rand = Random()                val rndIntOne: Int = rand.nextInt(imgs.length())                val rndIntTwo: Int = rand.nextInt(imgs.length())                val rndIntThree: Int = rand.nextInt(imgs.length())                val one: Int = imgs.getResourceId(rndIntOne, 0)                val two: Int = imgs.getResourceId(rndIntTwo, 0)                val three: Int = imgs.getResourceId(rndIntThree, 0)                try {                    ivOne!!.setImageResource(one)                    ivTwo!!.setImageResource(two)                    ivThree!!.setImageResource(three)                } catch (e: java.lang.Exception) {                    e.printStackTrace()                }            } catch (e: Exception) {            }        }    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.rl_back -> {                finish()            }            R.id.btn_signin -> {                if (CheckConnection.getInstance(this).isConnectingToInternet()) {                    if (isValid()) {                        callLoginWs()                    }                } else {                    CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))                }            }            R.id.tv_forgot_password -> {                startActivity(Intent(this, ForgotPassActivity::class.java))            }            R.id.tv_sign_up -> {                startActivity(Intent(this, SignUpActivity::class.java))            }            R.id.ivGoogle -> {                try {                    if (mApiClient != null) {                        if (mApiClient!!.isConnected()) {                            val intent = Auth.GoogleSignInApi.getSignInIntent(mApiClient!!)                            startActivityForResult(intent, 25)                        } else {                            mApiClient!!.connect()                        }                    }                } catch (e: Exception) {                    e.printStackTrace()                }            }            R.id.ivFb -> {                if (CheckConnection.getInstance(this@LoginActivity).isConnectingToInternet()) {                    LoginManager.getInstance().logInWithReadPermissions(this, Constants.INSTANCE.getPermissions())                    registerLoginCallback()                } else {                    CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.check_internet_connection))                }            }        }    }    private fun isValid(): Boolean {        if (TextUtils.isEmpty(edtEmail!!.getText().toString())) {            CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.please_enter_email))            return false        } else {            edtEmail!!.setError(null)        }        if (!Constants.INSTANCE.isValidEmail(edtEmail!!.getText().toString())) {            CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.please_enter_valid_email))            return false        } else {            edtEmail!!.setError(null)        }        if (TextUtils.isEmpty(edtPassword!!.getText().toString())) {            CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.please_enter_password))            return false        } else {            edtPassword!!.setError(null)        }        if (edtPassword!!.getText().toString().length < 6) {            CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.please_enter_valid_password))            return false        } else {            edtPassword!!.setError(null)        }        return true    }    private fun getRendomImage() {        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_random_emoji)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(RendomImageResponse::class.java, object : ParsedRequestListener<RendomImageResponse> {                    override fun onResponse(response: RendomImageResponse?) {                        Log.i("responseRendom", response.toString())                        var mSuccess = false                        if (response!!.status!!.success!!.equals("true")) {                            mSuccess = true                        }                        if (mSuccess) {                            val circularProgressDrawable = CircularProgressDrawable(this@LoginActivity)                            circularProgressDrawable.strokeWidth = 5f                            circularProgressDrawable.centerRadius = 30f                            circularProgressDrawable.start()                            Glide.with(this@LoginActivity)                                    .asBitmap().load(response!!.status!!.result!![0].image)                                    .placeholder(circularProgressDrawable)                                    .listener(object : RequestListener<Bitmap> {                                        override fun onResourceReady(bitmap: Bitmap, o: Any, target: com.bumptech.glide.request.target.Target<Bitmap>?, dataSource: DataSource, b: Boolean): Boolean {                                            //   mBitmap = bitmap                                            return false                                        }                                        override fun onLoadFailed(e: GlideException?, model: Any?, target: com.bumptech.glide.request.target.Target<Bitmap>?, isFirstResource: Boolean): Boolean {                                            return false                                        }                                    }).into(ivOne!!)                            Glide.with(this@LoginActivity)                                    .asBitmap().load(response!!.status!!.result!![1].image)                                    .placeholder(circularProgressDrawable)                                    .listener(object : RequestListener<Bitmap> {                                        override fun onResourceReady(bitmap: Bitmap, o: Any, target: com.bumptech.glide.request.target.Target<Bitmap>?, dataSource: DataSource, b: Boolean): Boolean {                                            //   mBitmap = bitmap                                            return false                                        }                                        override fun onLoadFailed(e: GlideException?, model: Any?, target: com.bumptech.glide.request.target.Target<Bitmap>?, isFirstResource: Boolean): Boolean {                                            return false                                        }                                    }).into(ivTwo!!)                            Glide.with(this@LoginActivity)                                    .asBitmap().load(response!!.status!!.result!![2].image)                                    .placeholder(circularProgressDrawable)                                    .listener(object : RequestListener<Bitmap> {                                        override fun onResourceReady(bitmap: Bitmap, o: Any, target: com.bumptech.glide.request.target.Target<Bitmap>?, dataSource: DataSource, b: Boolean): Boolean {                                            //   mBitmap = bitmap                                            return false                                        }                                        override fun onLoadFailed(e: GlideException?, model: Any?, target: com.bumptech.glide.request.target.Target<Bitmap>?, isFirstResource: Boolean): Boolean {                                            return false                                        }                                    }).into(ivThree!!)                        }                    }                    override fun onError(anError: ANError?) {                        Log.i("error", anError.toString())                    }                })    }    private fun callLoginWs() {        val progressDialog = CustomProgressDialog(this@LoginActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_login)                .addBodyParameter(Constants.INSTANCE.strWS_email, edtEmail!!.getText().toString().trim())                .addBodyParameter(Constants.INSTANCE.strWS_password, edtPassword!!.getText().toString().trim())                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(LoginResponse::class.java, object : ParsedRequestListener<LoginResponse> {                    override fun onResponse(response: LoginResponse?) {                        Log.e("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            SaveCredential(response)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@LoginActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@LoginActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.e("ERROR", anError.errorCode.toString())                        Log.e("ERROR", anError.errorBody)                        if (anError.errorCode.toString().equals("401")) {                            CustomDialog.instance!!.showalert(this@LoginActivity, "Email or Password incorrect")                        }                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    //Facebook Login/Signup    private fun registerLoginCallback() {        LoginManager.getInstance().registerCallback(callbackManager, object : FacebookCallback<LoginResult> {            override fun onSuccess(result: LoginResult) {                if (result.accessToken != null) {                    val request = GraphRequest.newMeRequest(result.accessToken                    ) { `object`, response ->                        Log.e("response_main_fb: ", (response).toString() + "")                        try {                            if (response!!.connection!!.responseCode == 200) {                                if (`object`!!.has("id")) {                                    mSocialID = `object`.getString("id")                                    Log.i("fbData", `object`.getString("id"))                                }                                if (`object`.has("first_name")) {                                    mSocialName = `object`.getString("first_name")                                    Log.i("fbData", `object`.getString("first_name"))                                }                                if (`object`.has("last_name")) {                                    mSocialLName = `object`.getString("last_name")                                    Log.i("fbData", `object`.getString("last_name"))                                }                                if (`object`.has("gender")) {                                    mSocialGender = `object`.getString("gender")                                    Log.i("fbData", `object`.getString("gender"))                                }                                if (`object`.has("email")) {                                    mSocialEmail = `object`.getString("email")                                    Log.i("fbData", `object`.getString("email"))                                }                                if (mSocialEmail != null && !TextUtils.isEmpty(mSocialEmail)) {                                    if (CheckConnection.getInstance(this@LoginActivity).isConnectingToInternet()) {                                        callUsarAlreadyLoginOrNotWs("FB")                                        Log.i("fbData", "CALL")                                    } else {                                        CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.check_internet_connection))                                        Log.i("fbData", "CALL1")                                    }                                } else {                                    showMailDialog()                                    Log.i("fbData", "CALL2")                                }                                LoginManager.getInstance().logOut()                            } else                                Toast.makeText(this@LoginActivity, getString(R.string.error_message), Toast.LENGTH_SHORT).show()                        } catch (e: Exception) {                            e.printStackTrace()                            Log.i("fbData", "ERROR" + e.printStackTrace())                        }                    }                    val parameters = Bundle()//                    parameters.putString("fields", "id,first_name,last_name,gender,email,picture.type(large)")                    parameters.putString("fields", "id,first_name,last_name,email,picture.type(large)")                    request.parameters = parameters                    request.executeAsync()                } else {                    Toast.makeText(this@LoginActivity, getString(R.string.error_message), Toast.LENGTH_SHORT).show()                }            }            override fun onError(error: FacebookException) {}            override fun onCancel() {}        })    }    private fun showMailDialog() {        val dialog = Dialog(this@LoginActivity)        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)        dialog.window!!.setBackgroundDrawableResource(android.R.color.transparent)        dialog.setContentView(R.layout.dialog_enter_mail)        dialog.setCanceledOnTouchOutside(false)        dialog.setCancelable(false)        edtEmail = dialog.findViewById(R.id.edt_email)        val btnSave = dialog.findViewById<View>(R.id.btn_save)        btnSave.setOnClickListener {            if (CheckConnection.getInstance(this@LoginActivity).isConnectingToInternet()) {                if (TextUtils.isEmpty(edtEmail!!.getText().toString())) {                    CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.please_enter_email))                } else {                    mSocialEmail = edtEmail!!.text.toString().trim()                    dialog.dismiss()                    callUsarAlreadyLoginOrNotWs("FB")                }            } else {                dialog.dismiss()                CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.check_internet_connection))            }        }        dialog.show()    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        callbackManager!!.onActivityResult(requestCode, resultCode, data)        if (resultCode != RESULT_OK)            return        else{            val result = Auth.GoogleSignInApi.getSignInResultFromIntent(data!!)            if (result!!.isSuccess) {                val account = result.signInAccount                mSocialID = account!!.id.toString()                mSocialName = account.givenName.toString()                mSocialLName = account.familyName.toString()                mSocialEmail = account.email.toString()                Log.e("socialDetails", mSocialID + "," +                        mSocialName + "," +                        mSocialLName + "," +                        mSocialEmail + ",")                try {                    if (mSocialProfile != null) {                        mSocialProfile = account.photoUrl!!.toString()                    }                } catch (e: Exception) {                    e.printStackTrace()                }                Log.i("googleLoginData", account.toString())                if (CheckConnection.getInstance(this@LoginActivity).isConnectingToInternet()) {                    callUsarAlreadyLoginOrNotWs("GOOGLE")                } else {                    CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.check_internet_connection))                }            } else {                Log.e("GOOGLE", "PPPPPPP " + Gson().toJson(result))            }        }    }    //Social Login and SignUp webservicecall(fb/google)    private fun callUsarAlreadyLoginOrNotWs(type: String) {        val progressDialog = CustomProgressDialog(this@LoginActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_check_social_account)                .addBodyParameter(Constants.INSTANCE.str_social_id, mSocialID)                .addBodyParameter(Constants.INSTANCE.str_login_type, type)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(CheckAlreadyLoginOrNotResponse::class.java, object : ParsedRequestListener<CheckAlreadyLoginOrNotResponse> {                    override fun onResponse(response: CheckAlreadyLoginOrNotResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            if (response!!.status!!.is_login.equals("0")) {                                //New user                                if (CheckConnection.getInstance(this@LoginActivity).isConnectingToInternet()) {                                    val intent = Intent(this@LoginActivity, SelectGenderActivity::class.java)                                    intent.putExtra("fname", mSocialName)                                    intent.putExtra("lname", mSocialLName)                                    intent.putExtra("email", mSocialEmail)                                    intent.putExtra("type", type)                                    intent.putExtra("social_id", mSocialID)                                    intent.putExtra("isSocial", "1")                                    startActivity(intent)                                } else {                                    CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.check_internet_connection))                                }                            } else {                                //Alredy login user                                if (CheckConnection.getInstance(this@LoginActivity).isConnectingToInternet()) {                                    callSocialWs(type, response.status!!.result!!.skin_tone!!, response.status!!.result!!.gender!!)                                } else {                                    CustomDialog.instance!!.showalert(this@LoginActivity, resources.getString(R.string.check_internet_connection))                                }                            }                        } else {                            try {                                CustomDialog.instance!!.showalert(this@LoginActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@LoginActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    //Social Login and SignUp webservicecall(FB/GOOGLE)    private fun callSocialWs(type: String, mSkinTone: String, mGender: String) {        val progressDialog = CustomProgressDialog(this@LoginActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_social_insert)                .addBodyParameter(Constants.INSTANCE.str_social_id, mSocialID)                .addBodyParameter(Constants.INSTANCE.str_login_type, type)                .addBodyParameter(Constants.INSTANCE.str_first_name, mSocialName)                .addBodyParameter(Constants.INSTANCE.str_last_name, mSocialLName)                .addBodyParameter(Constants.INSTANCE.str_email, mSocialEmail)                .addBodyParameter(Constants.INSTANCE.str_gender, mGender)                .addBodyParameter(Constants.INSTANCE.str_skin_tone, mSkinTone)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(SocialLoginSignUpResponse::class.java, object : ParsedRequestListener<SocialLoginSignUpResponse> {                    override fun onResponse(response: SocialLoginSignUpResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            SaveCredentialSocial(response!!)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@LoginActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@LoginActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    override fun onConnected(p0: Bundle?) {        if (!calledOnce) {            calledOnce = true            callGoogleAccountSelection()        }    }    private fun callGoogleAccountSelection() {        try {            if (mApiClient != null) {                if (mApiClient!!.isConnected()) {                    Auth.GoogleSignInApi.signOut(mApiClient!!)                    mApiClient!!.clearDefaultAccountAndReconnect().setResultCallback {                        val intent = Auth.GoogleSignInApi.getSignInIntent(mApiClient!!)                        startActivityForResult(intent, 25)                    }                }            }        } catch (e: Exception) {        }    }    override fun onConnectionFailed(p0: ConnectionResult) {}    override fun onConnectionSuspended(p0: Int) {}    private fun SaveCredentialSocial(response: SocialLoginSignUpResponse?) {        val gson = Gson()        val json = gson.toJson(response)        Preferences.INSTANCE?.setLoginObject(json)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_ID, response?.status!!.result?.id)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_FIREST_NAME, response?.status!!.result?.first_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_LAST_NAME, response?.status!!.result?.last_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_EMAIL, response?.status!!.result?.email)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_GENDER, response?.status!!.result?.gender)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_SKINTONE, response?.status!!.result?.skin_tone)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.LOGIN_TYPE, response?.status!!.result?.login_type)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.TOKEN, response?.status!!.result?.token)        Preferences.INSTANCE?.loginStatus = true        val intent = Intent(this@LoginActivity, HomeActivity::class.java)        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)        startActivity(intent)        finish()    }    private fun SaveCredential(response: LoginResponse?) {        //Save Preference value        //        if (TextUtils.isEmpty(fbEmail)) {        //            Toast.makeText(activity, resources.getString(R.string.fbemail), Toast.LENGTH_SHORT).show()        //        } else {        val gson = Gson()        val json = gson.toJson(response)        Preferences.INSTANCE!!.setLoginObject(json)        Preferences.INSTANCE!!.SavePrefValue(Preferences.INSTANCE?.PREF_USER_ID, response?.status!!.result?.id)        Preferences.INSTANCE!!.SavePrefValue(Preferences.INSTANCE?.PREF_FIREST_NAME, response.status!!.result?.first_name)        Preferences.INSTANCE!!.SavePrefValue(Preferences.INSTANCE?.PREF_LAST_NAME, response.status!!.result?.last_name)        Preferences.INSTANCE!!.SavePrefValue(Preferences.INSTANCE?.PREF_USER_EMAIL, response.status!!.result?.email)        Preferences.INSTANCE!!.SavePrefValue(Preferences.INSTANCE?.PREF_USER_GENDER, response.status!!.result?.gender)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_SKINTONE, response.status!!.result?.skin_tone)        Preferences.INSTANCE!!.SavePrefValue(Preferences.INSTANCE?.LOGIN_TYPE, response.status!!.result?.login_type)        Preferences.INSTANCE!!.SavePrefValue(Preferences.INSTANCE?.TOKEN, response.status!!.result?.token)        Preferences.INSTANCE!!.loginStatus = true        val intent = Intent(this@LoginActivity, HomeActivity::class.java)        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)        startActivity(intent)        finish()    }}