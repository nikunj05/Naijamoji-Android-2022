package com.naijamojiapp.app.activityimport android.Manifestimport android.content.Intentimport android.content.pm.PackageManagerimport android.os.Buildimport android.os.Bundleimport android.os.Handlerimport android.util.Base64import android.util.Logimport android.view.Viewimport android.view.WindowManagerimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.judemanutd.autostarter.AutoStartPermissionHelperimport com.naijamojiapp.app.permission.AfterPermissionGrantedimport com.naijamojiapp.app.permission.EasyPermissionsimport com.naijamojiapp.app.response.EmojiListResponseimport com.naijamojiapp.app.roomDB.AppDatabaseimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.Preferencesimport java.security.MessageDigestimport java.security.NoSuchAlgorithmExceptionimport com.naijamojiapp.Rimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.response.newResponse.AllEmojiListResponseimport com.naijamojiapp.app.response.newResponse.CatListTabResponseimport com.naijamojiapp.app.response.newResponse.TagListResponseimport com.naijamojiapp.app.roomDB.entity.AllStickerListimport com.naijamojiapp.app.roomDB.entity.CatListTabimport com.naijamojiapp.app.roomDB.entity.TagListimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Utility//old accounts//TODO = googleapi(samjio174@gmail.com,bhavin@123) ,facebook account(samjio174@gmail.com,bhavin@123)//new accounts/*Google Account Details:Email:` developer@naijamojiapp.comPassword: N1kunj!!Facebook Account Details:Email: nikunj.goriya@coderscotch.comPassword: coderscotch@fb*/class SplashActivity : AppCompatActivity(), EasyPermissions.PermissionCallbacks {    private val currentApiVersion = Build.VERSION.SDK_INT    var database: AppDatabase? = null    //AllStickerList    var mEmojiList = ArrayList<AllEmojiListResponse.Insert>()    //CatTabList    var mCatList: ArrayList<CatListTabResponse.Insert>? = null    //TagList    var mTagListt: ArrayList<TagListResponse.Insert>? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            getWindow().setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,                WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);        }        setContentView(R.layout.activity_splash)        database = AppDatabase.getDatabaseInstance(this);        try {            val info = packageManager.getPackageInfo("com.naijamojiapp", PackageManager.GET_SIGNATURES)            for (signature in info.signatures) {                val md = MessageDigest.getInstance("SHA")                md.update(signature.toByteArray())                Log.d("KeyHash:", Base64.encodeToString(md.digest(), Base64.DEFAULT))            }        } catch (e: Exception) {        } catch (e: NoSuchAlgorithmException) {        }        if (currentApiVersion >= Build.VERSION_CODES.M) {            CheckForLocationPermission()        } else {            AddDataInLocal()        }    }    @AfterPermissionGranted(102)    fun CheckForLocationPermission() {        if (EasyPermissions.hasPermissions(this@SplashActivity,                Manifest.permission.WRITE_EXTERNAL_STORAGE,                Manifest.permission.READ_EXTERNAL_STORAGE            )) {            AddDataInLocal()        } else {            //Ask for one permission.            EasyPermissions.requestPermissions(this@SplashActivity, getString(R.string.permission_location),                Constants.INSTANCE.RC_LOCATION_PERM,                Manifest.permission.WRITE_EXTERNAL_STORAGE,                Manifest.permission.READ_EXTERNAL_STORAGE            )        }    }    override fun onBackPressed() {        finish()    }    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults)        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this)    }    override fun onPermissionsGranted(requestCode: Int, perms: List<String>) {        when (requestCode) {            Constants.INSTANCE.RC_LOCATION_PERM -> {            }        }    }    override fun onPermissionsDenied(requestCode: Int, perms: List<String>) {        when (requestCode) {            Constants.INSTANCE.RC_LOCATION_PERM -> CheckForLocationPermission()        }    }    private fun AddDataInLocal() {        if (CheckConnection.getInstance(applicationContext).isConnectingToInternet) {            callTabListWs()        } else {            CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))        }    }    //Add All Tab list in local DB    private fun callTabListWs() {        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_tag_list)            .addBodyParameter(Constants.INSTANCE.str_timestamp,Preferences.INSTANCE?.getCatTimeStamp)            .setPriority(Priority.MEDIUM)            .build()            .getAsObject(CatListTabResponse::class.java, object : ParsedRequestListener<CatListTabResponse?> {                override fun onResponse(response: CatListTabResponse?) {                    var mSuccess = false                    if (response!!.status!!.success!!.equals("true")) {                        mSuccess = true                    }                    if (mSuccess) {                        Log.i("response CATEGORY", response.toString())                        //Insert Data                        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_CAT_TIMESTAMP, response.status!!.timestamp)                        mCatList = response!!.status!!.categories!!.insert                        var mCatListTab: CatListTab? = null                        for (i in mCatList!!.indices) {                            mCatListTab = CatListTab(mCatList!![i].id,                                mCatList!![i].image,                                mCatList!![i].updated_at,                                mCatList!![i].name,                                mCatList!![i].created_at)                            database!!.userDao().insertCatList(mCatListTab)                        }                        //Delete Data                        for (i in response.status!!.categories!!.deleted!!.indices) {                            Log.i("deleteIds",response.status!!.categories!!.deleted!![i])                            database!!.userDao().deleteByCatId(response.status!!.categories!!.deleted!![i])                        }                        callGetAllStickers()                    } else {                        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_CAT_TIMESTAMP, response?.status!!.timestamp)                        callGetAllStickers()                    }                }                override fun onError(anError: ANError) {                    callGetAllStickers()                    Log.i("error"+ "1", anError.errorBody)                }            })    }    //Add all stickers in local DB    private fun callGetAllStickers() {        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_emoji_listing)            .addBodyParameter(Constants.INSTANCE.str_timestamp, Preferences.INSTANCE?.getAllStickersTimeStamp)            .setPriority(Priority.MEDIUM)            .build()            .getAsObject(AllEmojiListResponse::class.java, object : ParsedRequestListener<AllEmojiListResponse> {                override fun onResponse(response: AllEmojiListResponse?) {                    Log.i("response", response.toString())                    var mSuccess = false                    if (response!!.status!!.success!!.equals("true")){                        mSuccess = true                    }                    if (mSuccess) {                        //Insert                        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_AllSTICKERS_TIMESTAMP, response.status!!.timestamp)                        mEmojiList = response.status!!.emojis!!.insert!!                        var mAllStickerList: AllStickerList? = null                        for (i in mEmojiList.indices) {                            mAllStickerList = AllStickerList(mEmojiList[i].id,                                mEmojiList[i].title,                                mEmojiList[i].category_id,                                mEmojiList[i].is_publish,                                mEmojiList[i].is_studiomode,                                mEmojiList[i].is_gender_available,                                mEmojiList[i].text_limit,                                mEmojiList[i].image,                                mEmojiList[i].img_f_dark,                                mEmojiList[i].img_f_medium,                                mEmojiList[i].img_f_light,                                mEmojiList[i].img_m_dark,                                mEmojiList[i].img_m_medium,                                mEmojiList[i].img_m_light,                                mEmojiList[i].position,                                mEmojiList[i].created_at,                                mEmojiList[i].updated_at)                            database!!.userDao().insertUser(mAllStickerList)                        }                        //Delete Data                        for (i in response.status!!.emojis!!.deleted!!.indices) {                            Log.i("deleteIds",response.status!!.emojis!!.deleted!![i])                            database!!.userDao().deleteByStickerId(response.status!!.emojis!!.deleted!![i])                        }                        getStickerTag()                        //    GoToNext()                    } else {                        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_AllSTICKERS_TIMESTAMP, response.status!!.timestamp)                        //   GoToNext()                        getStickerTag()                    }                }                override fun onError(anError: ANError?) {                    getStickerTag()                    // GoToNext()                    Log.i("error", anError.toString())                }            })    }    private fun getStickerTag() {        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_tag_list_new)            .addBodyParameter(Constants.INSTANCE.str_timestamp, Preferences.INSTANCE?.getTagTimeStamp)            .setPriority(Priority.MEDIUM)            .build()            .getAsObject(TagListResponse::class.java, object : ParsedRequestListener<TagListResponse> {                override fun onResponse(response: TagListResponse?) {                    Log.i("response getStickerTag", response.toString())                    var mSuccess = false                    if (response!!.status!!.success!!.equals("true")){                        mSuccess = true                    }                    if (mSuccess) {                        //Insert                        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_TAG_TIMESTAMP, response.status!!.timestamp)                        mTagListt = response.status!!.tags!!.insert!!                        var mTagList: TagList? = null                        for (i in mTagListt!!.indices) {                            mTagList = TagList(mTagListt!![i].id,                                mTagListt!![i].name,                                mTagListt!![i].position,                                mTagListt!![i].created_at,                                mTagListt!![i].updated_at)                            database!!.userDao().insertTagList(mTagList)                        }                        //Delete Data                        for (i in response.status!!.tags!!.deleted!!.indices) {                            Log.i("deleteIds",response.status!!.tags!!.deleted!![i])                            database!!.userDao().deleteByTagId(response.status!!.tags!!.deleted!![i])                        }                        GoToNext()                    } else {                        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_AllSTICKERS_TIMESTAMP, response.status!!.timestamp)                        GoToNext()                    }                }                override fun onError(anError: ANError?) {                    GoToNext()                    Log.i("error", anError?.errorBody!!)                }            })    }    fun GoToNext() {        val handler = Handler()        handler.postDelayed({            if (Preferences.INSTANCE!!.loginStatus) {//                val autoStartAvailable = AutoStartPermissionHelper.getInstance().isAutoStartPermissionAvailable(this)//                val success = AutoStartPermissionHelper.getInstance().getAutoStartPermission(this@SplashActivity)//                var message = "Failed"//                Toast.makeText(this@SplashActivity, "Supports AutoStart: $autoStartAvailable, Action $message", Toast.LENGTH_SHORT).show()                val intent = Intent(this@SplashActivity, HomeActivity::class.java)                startActivity(intent)                finish()            } else {//                val autoStartAvailable = AutoStartPermissionHelper.getInstance().isAutoStartPermissionAvailable(this)//                val success = AutoStartPermissionHelper.getInstance().getAutoStartPermission(this@SplashActivity)//                var message = "Failed"//                Toast.makeText(this@SplashActivity, "Supports AutoStart: $autoStartAvailable, Action $message", Toast.LENGTH_SHORT).show()                val intent = Intent(this@SplashActivity, LoginActivity::class.java)                startActivity(intent)                finish()            }        }, 1000)    }}