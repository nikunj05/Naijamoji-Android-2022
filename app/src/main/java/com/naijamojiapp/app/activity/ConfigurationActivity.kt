package com.naijamojiapp.app.activityimport android.app.DatePickerDialogimport android.content.Intentimport android.os.Bundleimport android.text.TextUtilsimport android.util.Logimport android.view.Viewimport android.view.Windowimport android.view.WindowManagerimport android.widget.*import androidx.appcompat.app.AppCompatActivityimport androidx.core.content.ContextCompatimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.google.gson.Gsonimport com.naijamojiapp.Rimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.response.LoginResponseimport com.naijamojiapp.app.response.ProfileResponseimport com.naijamojiapp.app.response.SocialLoginSignUpResponseimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.Preferencesimport com.naijamojiapp.app.utils.Utilityimport java.util.*class ConfigurationActivity : AppCompatActivity(), View.OnClickListener {    var rlBack: RelativeLayout? = null    var edtFname: EditText? = null    var edtLname: EditText? = null    var rlSelectMale: RelativeLayout? = null    var rlSelectFemale: RelativeLayout? = null    var rlSelectLight: RelativeLayout? = null    var rlSelectMedium: RelativeLayout? = null    var rlSelectDark: RelativeLayout? = null    var llUpdate: LinearLayout? = null    var btnUpdate: Button? = null    var mGender: String? = ""    var mSkinTone: String? = ""    var ivMale: ImageView? = null    var ivFemale: ImageView? = null    var rlLight: RelativeLayout? = null    var rlMedium: RelativeLayout? = null    var rlDark: RelativeLayout? = null    var ivLight: ImageView? = null    var ivMedium: ImageView? = null    var ivDark: ImageView? = null    var rlDob: RelativeLayout? = null    var tvDob: TextView? = null    var tvMale: TextView? = null    var tvFemale: TextView? = null    var mDOB: String? = ""    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        requestWindowFeature(Window.FEATURE_NO_TITLE)        window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN)        setContentView(R.layout.activity_configuration)        init()        if (CheckConnection.getInstance(this).isConnectingToInternet()) {            callGetProfileWs()        } else {            CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))        }    }    private fun init() {        rlBack = findViewById(R.id.rl_back)        rlBack!!.setOnClickListener(this)        edtFname = findViewById(R.id.edt_fname)        edtLname = findViewById(R.id.edt_lname)        //Gender        rlSelectMale = findViewById(R.id.rl_select_male)        rlSelectMale!!.setOnClickListener(this)        rlSelectMale!!.setTag("0")        rlSelectFemale = findViewById(R.id.rl_select_female)        rlSelectFemale!!.setOnClickListener(this)        rlSelectFemale!!.setTag("0")        ivMale = findViewById(R.id.ivMale)      //  ivMale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.male_unselected_new))        ivFemale = findViewById(R.id.ivFemale)      //  ivFemale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.female_unselected_new))        tvMale = findViewById(R.id.tv_male)        tvFemale = findViewById(R.id.tv_female)        //  tvMale!!.setTextColor(ContextCompat.getColor(this, R.color.gray_new))        //  tvFemale!!.setTextColor(ContextCompat.getColor(this, R.color.gray_new))        //SkinTone        rlSelectLight = findViewById(R.id.rl_select_light)        rlSelectLight!!.setOnClickListener(this)        rlSelectLight!!.setTag("0")        rlSelectMedium = findViewById(R.id.rl_select_medium)        rlSelectMedium!!.setOnClickListener(this)        rlSelectDark = findViewById(R.id.rl_select_dark)        rlSelectDark!!.setOnClickListener(this)        rlSelectDark!!.setTag("0")        ivLight = findViewById(R.id.iv_light)        ivLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))        ivLight!!.setTag("0")        ivMedium = findViewById(R.id.iv_medium)        ivMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))        ivMedium!!.setTag("0")        ivDark = findViewById(R.id.iv_dark)        ivDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))        ivDark!!.setTag("0")        llUpdate = findViewById(R.id.ll_update)        llUpdate!!.setOnClickListener(this)        btnUpdate = findViewById(R.id.btn_update)        btnUpdate!!.setOnClickListener(this)        rlDob = findViewById(R.id.rlDob)        rlDob!!.setOnClickListener(this)        tvDob = findViewById(R.id.tvDob)        tvDob!!.setOnClickListener(this)        rlLight = findViewById(R.id.rl_light)        rlMedium = findViewById(R.id.rl_medium)        rlDark = findViewById(R.id.rl_dark)    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.tvDob -> {                val calendar = Calendar.getInstance()                val year = calendar.get(Calendar.YEAR)                val month = calendar.get(Calendar.MONTH)                val day = calendar.get(Calendar.DAY_OF_MONTH)                /*val dpd = DatePickerDialog(this, DatePickerDialog.OnDateSetListener { view, year, monthOfYear, dayOfMonth ->                    mDOB = Utility.instance!!.mDatePickerDateformatChange(dayOfMonth.toString() + "/" + (monthOfYear + 1) + "/" + year)                    // Display Selected date in textbox                tvDob!!.text = dayOfMonth.toString() + "/" + (monthOfYear + 1) + "/" + year                }, year, month, day)*/                val dpd = DatePickerDialog(this, DatePickerDialog.OnDateSetListener { view, year, monthOfYear, dayOfMonth ->                    // Display Selected date in textbox                    if (onDateSet(view, year, monthOfYear, dayOfMonth)!!) {                        CustomDialog.instance!!.showalert(this@ConfigurationActivity, resources.getString(R.string.age_validation))                    } else {                        mDOB = Utility.instance!!.mDatePickerDateformatChange(dayOfMonth.toString() + "/" + (monthOfYear + 1) + "/" + year)                        tvDob!!.text = Utility.instance!!.simpleDateConvertDob(mDOB!!)                    }                }, year, month, day)                calendar.timeInMillis = System.currentTimeMillis() - 1000                dpd.datePicker.maxDate = calendar.timeInMillis                dpd.show()            }            R.id.rl_back -> {                finish()            }            R.id.btn_update -> {                if (CheckConnection.getInstance(this).isConnectingToInternet()) {                    if(isValid()){                        callUpdateProfileWs()                    }                } else {                    CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))                }            }            R.id.rl_select_male -> {                if (rlSelectMale!!.getTag().equals("0")) {                    mGender = "M"                    rlSelectMale!!.setTag("1")                    rlSelectFemale!!.setTag("0")                    ivMale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.male_selected_new))                    ivFemale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.female_unselected_new))                    tvMale!!.setTextColor(ContextCompat.getColor(this, R.color.light_black))                    tvFemale!!.setTextColor(ContextCompat.getColor(this, R.color.gray_new))                }            }            R.id.rl_select_female -> {                if (rlSelectFemale!!.getTag().equals("0")) {                    mGender = "F"                    rlSelectMale!!.setTag("0")                    rlSelectFemale!!.setTag("1")                    ivMale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.male_unselected_new))                    ivFemale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.female_selected_new))                    tvMale!!.setTextColor(ContextCompat.getColor(this, R.color.gray_new))                    tvFemale!!.setTextColor(ContextCompat.getColor(this, R.color.light_black))                }            }            R.id.rl_select_light -> {                if (rlSelectLight!!.getTag().equals("0")) {                    mSkinTone = "L"                    rlSelectLight!!.setTag("1")                    rlSelectMedium!!.setTag("0")                    rlSelectDark!!.setTag("0")                    rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))                    rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                    rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))//                    ivLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.select))//                    ivMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//                    ivDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))                }            }            R.id.rl_select_medium -> {                if (rlSelectMedium!!.getTag().equals("0")) {                    mSkinTone = "M"                    rlSelectLight!!.setTag("0")                    rlSelectMedium!!.setTag("1")                    rlSelectDark!!.setTag("0")                    rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                    rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))                    rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))//                    ivLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//                    ivMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.select))//                    ivDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))                }            }            R.id.rl_select_dark -> {                if (rlSelectDark!!.getTag().equals("0")) {                    mSkinTone = "D"                    rlSelectLight!!.setTag("0")                    rlSelectMedium!!.setTag("0")                    rlSelectDark!!.setTag("1")                    rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                    rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                    rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))//                    ivLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//                    ivMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//                    ivDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.select))                }            }        }    }    fun onDateSet(view: DatePicker?, year: Int, month: Int, day: Int): Boolean? {        val userAge: Calendar = GregorianCalendar(year, month, day)        val minAdultAge: Calendar = GregorianCalendar()        minAdultAge.add(Calendar.YEAR, -18)        if (minAdultAge.before(userAge)) {            return true        }        return false    }    //GetProfile    private fun callGetProfileWs() {        val progressDialog = CustomProgressDialog(this@ConfigurationActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_get_profile)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(ProfileResponse::class.java, object : ParsedRequestListener<ProfileResponse> {                    override fun onResponse(response: ProfileResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            setProfile(response)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@ConfigurationActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@ConfigurationActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    //UpdateProfile    private fun callUpdateProfileWs() {        val progressDialog = CustomProgressDialog(this@ConfigurationActivity, R.style.progress_dialog_text_style)        progressDialog.show()        Log.d("Print dob","==>"+tvDob!!.text.toString());        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_edit_profile)                .addBodyParameter(Constants.INSTANCE.str_f_name, edtFname!!.text.toString())                .addBodyParameter(Constants.INSTANCE.str_last_name, edtLname!!.text.toString())                .addBodyParameter(Constants.INSTANCE.str_gender, mGender)                .addBodyParameter(Constants.INSTANCE.str_skin_tone, mSkinTone)                .addBodyParameter(Constants.INSTANCE.str_dob, mDOB)                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(ProfileResponse::class.java, object : ParsedRequestListener<ProfileResponse> {                    override fun onResponse(response: ProfileResponse?) {                        Log.e("response", response.toString())                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            SaveCredential(response!!)                          //  finish()                             //setProfile(response)                        } else {                            try {                                CustomDialog.instance!!.showalert(this@ConfigurationActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@ConfigurationActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.errorBody)                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    private fun SaveCredential(response: ProfileResponse?) {        val gson = Gson()        val json = gson.toJson(response)        Preferences.INSTANCE?.setLoginObject(json)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_ID, response?.status!!.result?.id)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_FIREST_NAME, response?.status!!.result?.first_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_LAST_NAME, response?.status!!.result?.last_name)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_EMAIL, response?.status!!.result?.email)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_GENDER, response?.status!!.result?.gender)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.PREF_USER_SKINTONE, response?.status!!.result?.skin_tone)        Preferences.INSTANCE?.SavePrefValue(Preferences.INSTANCE?.LOGIN_TYPE, response?.status!!.result?.login_type)        finish()    }    private fun isValid(): Boolean {        if (TextUtils.isEmpty(mDOB)) {            CustomDialog.instance!!.showalert(this@ConfigurationActivity, resources.getString(R.string.please_select_birthdate))            return false        }        return true    }    private fun setProfile(response: ProfileResponse?) {        edtFname!!.setText(response!!.status!!.result!!.first_name)        edtLname!!.setText(response.status!!.result!!.last_name)        mDOB = Utility.instance!!.mDatePickerDateformatChange(response.status!!.result!!.birth_date!!)        tvDob!!.text = Utility.instance!!.simpleDateConvertDob(mDOB!!)//        tvDob!!.setText(response.status!!.result!!.birth_date)        Log.i("response", response.toString())        //SetGender        if (response.status!!.result!!.gender != null && !TextUtils.isEmpty(response.status!!.result!!.gender)) {            if (response.status!!.result!!.gender!!.toUpperCase().equals("M")) {                mGender = "M"                rlSelectMale!!.setTag("1")                rlSelectFemale!!.setTag("0")                ivMale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.male_selected_new))                ivFemale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.female_unselected_new))                tvMale!!.setTextColor(ContextCompat.getColor(this, R.color.light_black))                tvFemale!!.setTextColor(ContextCompat.getColor(this, R.color.gray_new))            } else {                mGender = "F"                rlSelectMale!!.setTag("0")                rlSelectFemale!!.setTag("1")                ivMale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.male_unselected_new))                ivFemale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.female_selected_new))                tvMale!!.setTextColor(ContextCompat.getColor(this, R.color.gray_new))                tvFemale!!.setTextColor(ContextCompat.getColor(this, R.color.light_black))            }        } else {            mGender = ""            rlSelectMale!!.setTag("0")            rlSelectFemale!!.setTag("0")            ivMale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.male_unselected_new))            ivFemale!!.setBackground(ContextCompat.getDrawable(this, R.drawable.female_unselected_new))            tvMale!!.setTextColor(ContextCompat.getColor(this, R.color.gray_new))            tvFemale!!.setTextColor(ContextCompat.getColor(this, R.color.gray_new))        }        //SetSkinTone        if (response.status!!.result!!.skin_tone != null && !TextUtils.isEmpty(response.status!!.result!!.skin_tone)) {            if (response.status!!.result!!.skin_tone.equals("L")) {                mSkinTone = "L"                rlSelectLight!!.setTag("1")                rlSelectMedium!!.setTag("0")                rlSelectDark!!.setTag("0")                rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))                rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))//                ivLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.select))//                ivMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//                ivDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))            } else if (response.status!!.result!!.skin_tone.equals("M")) {                mSkinTone = "M"                rlSelectLight!!.setTag("0")                rlSelectMedium!!.setTag("1")                rlSelectDark!!.setTag("0")                rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))                rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))//                ivLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//                ivMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.select))//                ivDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))            } else {                mSkinTone = "D"                rlSelectLight!!.setTag("0")                rlSelectMedium!!.setTag("0")                rlSelectDark!!.setTag("1")                rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))                rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_blue))//                ivLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//                ivMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//                ivDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.select))            }        } else {            mSkinTone = ""            rlSelectLight!!.setTag("0")            rlSelectMedium!!.setTag("0")            rlSelectDark!!.setTag("0")            rlLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))            rlMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))            rlDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.rounded_bg_conf_gray))//            ivLight!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//            ivMedium!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))//            ivDark!!.setBackground(ContextCompat.getDrawable(this, R.drawable.unselect))        }    }}