package com.naijamojiapp.app.activityimport android.app.Dialogimport android.graphics.Bitmapimport android.graphics.Canvasimport android.graphics.Colorimport android.net.Uriimport android.os.Bundleimport android.util.Logimport android.view.Viewimport android.view.ViewGroupimport android.view.Windowimport android.view.WindowManagerimport android.widget.Buttonimport android.widget.ImageViewimport android.widget.LinearLayoutimport android.widget.TextViewimport androidx.appcompat.app.AppCompatActivityimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.bumptech.glide.Glideimport com.bumptech.glide.load.DataSourceimport com.bumptech.glide.load.engine.DiskCacheStrategyimport com.bumptech.glide.load.engine.GlideExceptionimport com.bumptech.glide.request.RequestListenerimport com.bumptech.glide.request.target.Targetimport com.naijamojiapp.Rimport com.naijamojiapp.app.adapter.YourStickersAdapterimport com.naijamojiapp.app.cusromsharedialog.ShareDialogimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.interfaces.RemoveStickerInterfaceimport com.naijamojiapp.app.interfaces.newApp.CustomStickerClickedimport com.naijamojiapp.app.response.CommonResponseWithObjectimport com.naijamojiapp.app.response.newResponse.YourCustomStickersListResponseimport com.naijamojiapp.app.utils.*import java.io.Fileimport java.io.FileOutputStreamclass YourStickersActivity : AppCompatActivity(), View.OnClickListener, CustomStickerClicked, RemoveStickerInterface {    var llMain: LinearLayout? = null    var rvYourStickers: RecyclerView? = null    var mLinearLayoutManager1: GridLayoutManager? = null    var mYourStickersAdapter: YourStickersAdapter? = null    var mYourStickerList = ArrayList<YourCustomStickersListResponse.Result>()    var ivBack: ImageView? = null    var tvError: TextView? = null    var shareDialog: ShareDialog? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        requestWindowFeature(Window.FEATURE_NO_TITLE)        window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN)        setContentView(R.layout.activity_your_stickers)        init()        if (CheckConnection.getInstance(this@YourStickersActivity).isConnectingToInternet) {            callYourStickersWs()        } else {            CustomDialog.instance!!.showalert(this@YourStickersActivity, resources.getString(R.string.check_internet_connection))        }    }    private fun init() {        ivBack = findViewById(R.id.iv_back)        ivBack!!.setOnClickListener(this)        rvYourStickers = findViewById(R.id.rv_your_stickers)        mLinearLayoutManager1 = GridLayoutManager(this, 3)        rvYourStickers!!.layoutManager = mLinearLayoutManager1        llMain = findViewById(R.id.ll_main)        tvError = findViewById(R.id.tvError)    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.iv_back -> {                finish()            }        }    }    //call web service for edited stickers list by you    private fun callYourStickersWs() {        if (this != null) {            val progressDialog = CustomProgressDialog(this, R.style.progress_dialog_text_style)            progressDialog.show()//            Log.i("tokan", Preferences.INSTANCE?.token)            AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_custom_user_emoji)                    .setPriority(Priority.MEDIUM)                    .build()                    .getAsObject(YourCustomStickersListResponse::class.java, object : ParsedRequestListener<YourCustomStickersListResponse> {                        override fun onResponse(response: YourCustomStickersListResponse?) {                            Log.i("response", response.toString())                            if (progressDialog.isShowing)                                progressDialog.dismiss()                            var mSuccess = false                            if (response != null)                                if (response.status!!.success == (Constants.INSTANCE.one)) {                                    mSuccess = true                                }                            if (mSuccess) {                                if (mYourStickerList.size > 0) {                                    mYourStickerList.clear()                                }                                mYourStickerList = response!!.status!!.result!!                                if (mYourStickerList != null && mYourStickerList.size > 0) {                                    tvError!!.visibility = View.GONE                                    rvYourStickers!!.visibility = View.VISIBLE                                    rvYourStickers!!.setHasFixedSize(true)                                    rvYourStickers!!.setItemViewCacheSize(mYourStickerList.size)                                    mYourStickersAdapter = YourStickersAdapter(this@YourStickersActivity, mYourStickerList, this@YourStickersActivity, this@YourStickersActivity)                                    rvYourStickers!!.adapter = mYourStickersAdapter                                } else {                                    tvError!!.visibility = View.VISIBLE                                    rvYourStickers!!.visibility = View.GONE                                    tvError!!.text = response.status!!.message!!                                }                            } else {                                try {                                    tvError!!.visibility = View.VISIBLE                                    rvYourStickers!!.visibility = View.GONE                                    tvError!!.text = resources.getString(R.string.not_available)                                    CustomDialog.instance!!.showalert(this@YourStickersActivity, response!!.status!!.message!!)                                } catch (e: Exception) {                                    e.printStackTrace()                                    tvError!!.visibility = View.VISIBLE                                    rvYourStickers!!.visibility = View.GONE                                    tvError!!.text = resources.getString(R.string.not_available)                                    CustomDialog.instance!!.showalert(this@YourStickersActivity, response!!.status!!.message!!)                                }                            }                        }                        override fun onError(anError: ANError) {                            Log.i("error", anError.toString())                            tvError!!.visibility = View.VISIBLE                            rvYourStickers!!.visibility = View.GONE                            tvError!!.text = resources.getString(R.string.not_available)                            if (progressDialog != null && progressDialog.isShowing)                                progressDialog.dismiss()                        }                    })        }    }    override fun mStickerlongPress(result: YourCustomStickersListResponse.Result?, mPosition: Int) {        if (CheckConnection.getInstance(this@YourStickersActivity).isConnectingToInternet) {            callRemoveStickersWs(result!!.id!!, mPosition)        } else {            CustomDialog.instance!!.showalert(this@YourStickersActivity, resources.getString(R.string.check_internet_connection))        }    }    //Call web service for remove stickers    private fun callRemoveStickersWs(mStickerId: String, mPosition: Int) {        if (this != null) {            Log.i("mStickerId", mStickerId)            val progressDialog = CustomProgressDialog(this, R.style.progress_dialog_text_style)            progressDialog.show()            AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_delete_custom_user_emoji)                    .addBodyParameter(Constants.INSTANCE.str_id, mStickerId)                    .setPriority(Priority.MEDIUM)                    .build()                    .getAsObject(CommonResponseWithObject::class.java, object : ParsedRequestListener<CommonResponseWithObject> {                        override fun onResponse(response: CommonResponseWithObject?) {                            Log.i("response", response.toString())                            if (progressDialog.isShowing)                                progressDialog.dismiss()                            var mSuccess = false                            if (response != null)                                if (response.status!!.success == (Constants.INSTANCE.one)) {                                    mSuccess = true                                }                            if (mSuccess) {                                mYourStickerList.removeAt(mPosition)                                mYourStickersAdapter!!.notifyDataSetChanged()                            } else {                                try {                                    CustomDialog.instance!!.showalert(this@YourStickersActivity, response!!.status!!.message!!)                                } catch (e: Exception) {                                    e.printStackTrace()                                    CustomDialog.instance!!.showalert(this@YourStickersActivity, response!!.status!!.message!!)                                }                            }                        }                        override fun onError(anError: ANError) {                            Log.i("error", anError.toString())                            if (progressDialog != null && progressDialog.isShowing)                                progressDialog.dismiss()                        }                    })        }    }    override fun mStickerClicked(result: YourCustomStickersListResponse.Result?, shareOrNot: String?) {        ShowDialog(result,shareOrNot)    }    private fun ShowDialog(result: YourCustomStickersListResponse.Result?, shareOrNot: String?) {        val dialog = Dialog(this)        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)        dialog.window!!.setBackgroundDrawableResource(android.R.color.transparent)        dialog.setContentView(R.layout.dialog_your_stickers)        dialog.setCanceledOnTouchOutside(false)        dialog.setCancelable(false)        val btnZoom = dialog.findViewById<Button>(R.id.btnZoom)        val btnShare = dialog.findViewById<Button>(R.id.btnShare)        val btnCancel = dialog.findViewById<Button>(R.id.btnCancel)        btnZoom.setOnClickListener {            Log.i("Unique", "1")            ivZoomInOutpopup(result!!.image);            dialog.dismiss()        }        btnShare.setOnClickListener {            //ShareImage            GlideApp.with(this)                    .asBitmap()                    .load(result!!.image)                    .listener(object : RequestListener<Bitmap> {                        override fun onLoadFailed(                                e: GlideException?,                                model: Any?,                                target: Target<Bitmap>?,                                isFirstResource: Boolean                        ): Boolean {                            return false                        }                        override fun onResourceReady(                                bitmap: Bitmap?,                                model: Any?,                                target:  Target<Bitmap>?,                                dataSource:  DataSource?,                                isFirstResource: Boolean                        ): Boolean {                            shareBitmap(bitmap!!,result.image!!)                            return false                        }                    }).priority(com.bumptech.glide.Priority.IMMEDIATE)                    .submit()            dialog.dismiss()        }        btnCancel.setOnClickListener {            dialog.dismiss()        }        dialog.show()    }    fun ivZoomInOutpopup(uri: String?) {        val dialog = Dialog(this)        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)        dialog.setCancelable(true)                dialog.getWindow()!!.setLayout(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);        dialog.window!!.setBackgroundDrawableResource(android.R.color.transparent)        dialog.setContentView(R.layout.dialog_zoomin_out)        val ivEvent = dialog.findViewById<View>(R.id.iv_evant) as ImageView        val ivCancel = dialog.findViewById<View>(R.id.iv_cancel) as ImageView //       ivEvent.setMaxZoom(4f)        Glide.with(this)                .load(uri)                .diskCacheStrategy(DiskCacheStrategy.ALL)                .into(ivEvent)        ivCancel.setOnClickListener {            dialog.dismiss()            finish()        }        dialog.show()    }    private fun shareBitmap(bitmap: Bitmap,image : String) {        try {            val file = File(this.externalCacheDir, "share.png")            val fOut = FileOutputStream(file)            val newBitmap = Bitmap.createBitmap(bitmap.width, bitmap.height, bitmap.config)            val canvas = Canvas(newBitmap)            canvas.drawColor(Color.WHITE)            canvas.drawBitmap(bitmap, 0f, 0f, null)//            newBitmap = Bitmap.createScaledBitmap(newBitmap, 512, 512, true)            newBitmap.compress(Bitmap.CompressFormat.PNG, 100, fOut)            fOut.flush()            fOut.close()            file.setReadable(true, false)            val builder : ShareDialog.Builder = ShareDialog.Builder()            builder.setType(ShareDialog.TYPE_IMAGE)            builder.showAsList(true)            this.shareDialog = builder.build()            shareDialog!!.setShareContent(Uri.fromFile(file).toString(),image,bitmap)            shareDialog!!.show(this@YourStickersActivity.supportFragmentManager)        } catch (e: Exception) {            e.printStackTrace()        }    }}