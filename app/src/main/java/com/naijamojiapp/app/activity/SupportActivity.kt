package com.naijamojiapp.app.activityimport android.Manifestimport android.annotation.SuppressLintimport android.content.Contextimport android.content.Intentimport android.media.MediaPlayerimport android.media.ThumbnailUtilsimport android.net.Uriimport android.os.AsyncTaskimport android.os.Buildimport android.os.Bundleimport android.provider.MediaStoreimport android.text.TextUtilsimport android.view.Viewimport android.view.Windowimport android.view.WindowManagerimport android.widget.*import androidx.appcompat.app.AppCompatActivityimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.bumptech.glide.Glideimport com.bumptech.glide.request.RequestOptionsimport com.naijamojiapp.Rimport com.naijamojiapp.app.bottomsheet.BottomSheetDialogimport com.naijamojiapp.app.cropview.CropActivityimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.interfaces.ResultCallBackimport com.naijamojiapp.app.permission.AfterPermissionGrantedimport com.naijamojiapp.app.permission.EasyPermissionsimport com.naijamojiapp.app.response.CommonResponseimport com.naijamojiapp.app.utils.*import java.io.Fileclass SupportActivity : AppCompatActivity(), View.OnClickListener, ResultCallBack, EasyPermissions.PermissionCallbacks {    var rlBack: RelativeLayout? = null    var rlUploadImageVideo: RelativeLayout? = null    var imgSelectedIvOrVid: ImageView? = null    var btnUpload: Button? = null    var edtComment: EditText? = null    private val bottomSheetDialog = BottomSheetDialog.newInstance(this)    private val currentApiVersion = Build.VERSION.SDK_INT    private var selectedVideoPath: String? = null    private var mImageCaptureUri: Uri? = null    companion object {        private val PICK_FROM_FILE_NORMAL = 3        private val SELECT_VIDEO = 2    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        Utility.instance!!.setTopBar(this,window)        setContentView(R.layout.activity_support)        init()    }    private fun init() {        edtComment = findViewById(R.id.edtComment)        rlBack = findViewById(R.id.rl_back)        rlBack!!.setOnClickListener(this)        rlUploadImageVideo = findViewById(R.id.rl_upload_image_video)        rlUploadImageVideo!!.setOnClickListener(this)        imgSelectedIvOrVid = findViewById(R.id.img_selected_IvOrVid)        btnUpload = findViewById(R.id.btn_upload)        btnUpload!!.setOnClickListener(this)    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.rl_back -> {                finish()            }             R.id.btn_upload -> {                if(mImageCaptureUri!=null){                    if(!TextUtils.isEmpty(edtComment!!.text.toString())){                        if (CheckConnection.getInstance(this).isConnectingToInternet()) {                            callSupportWS()                        } else {                            CustomDialog.instance!!.showalert(this, resources.getString(R.string.check_internet_connection))                        }                    }else{                        CustomDialog.instance!!.showalert(this, "Please enter comment.")                    }                }else{                    CustomDialog.instance!!.showalert(this, resources.getString(R.string.pls_select_image_video))                }            }            R.id.rl_upload_image_video -> {                if (currentApiVersion >= Build.VERSION_CODES.M) {                    checkStoragePermission()                } else {                    bottomSheetDialog.show(this@SupportActivity.getSupportFragmentManager(), "Bottom Sheet Dialog Fragment")                }            }        }    }    @AfterPermissionGranted(Constants.RC_STORAGE_PERM)    fun checkStoragePermission() {        val perms = arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)        if (EasyPermissions.hasPermissions(this@SupportActivity, *perms)) {            bottomSheetDialog.show(this@SupportActivity.getSupportFragmentManager(), "Bottom Sheet Dialog Fragment")        } else {            EasyPermissions.requestPermissions(this, getString(R.string.permission_storage), Constants.RC_STORAGE_PERM, *perms            )        }    }    override fun onPermissionsGranted(requestCode: Int, perms: MutableList<String>?) {}    override fun onPermissionsDenied(requestCode: Int, perms: MutableList<String>?) {}    override fun onActivityResultMine(requestCode: Int, resultCode: Int, data: Intent?) {        onActivityResult(requestCode, resultCode, data)    }   @SuppressLint("MissingSuperCall")   public override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if (resultCode != RESULT_OK)            return        when (requestCode) {            Constants.RECENT_CONTENT_REPORT_IMAGE -> {                val i = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)                startActivityForResult(i, PICK_FROM_FILE_NORMAL)            }            Constants.RECENT_CONTENT_REPORT_VIDEO -> {                val i2 = Intent(Intent.ACTION_PICK, MediaStore.Video.Media.EXTERNAL_CONTENT_URI)                startActivityForResult(i2, SELECT_VIDEO)            }            Constants.RECENT_CONTENT_REPORT_CANCEL ->{}            SELECT_VIDEO -> {                selectedVideoPath = Utility.getPath(this, data!!.data)                val mp = MediaPlayer.create(this, Uri.parse(selectedVideoPath))                val duration = mp.duration                mp.release()                if (duration / 1000 > 30) {                    Toast.makeText(this, "please select max 30 second video", Toast.LENGTH_SHORT).show()                } else {                    val bmThumbnail = ThumbnailUtils.createVideoThumbnail(                        selectedVideoPath!!,                            MediaStore.Video.Thumbnails.MINI_KIND)                    mImageCaptureUri = Utility.instance!!.getImageUri(this, bmThumbnail!!)                    DisplayImage(mImageCaptureUri);                }            }            PICK_FROM_FILE_NORMAL -> {                mImageCaptureUri = data!!.data                beginCrop(mImageCaptureUri!!)            }            420 -> handleCrop(resultCode, data!!)        }    }    private fun beginCrop(source: Uri) {        val intent = Intent(this, CropActivity::class.java)        intent.putExtra("image", source.toString())        startActivityForResult(intent, 420)    }    private fun handleCrop(resultCode: Int, result: Intent) {        if (resultCode == RESULT_OK) {            mImageCaptureUri = Uri.parse(result.extras!!.getString("cropimage"))            ImageCompressionAsyncTask(this).execute(mImageCaptureUri.toString())        }    }    internal inner class ImageCompressionAsyncTask(var mContext: Context) : AsyncTask<String, Void, String>() {        override fun doInBackground(vararg params: String): String {            return SiliCompressor.with(mContext).compress(params[0])        }        override fun onPostExecute(s: String) {            val imageFile = File(s)            val compressUri = Uri.fromFile(imageFile)            try {                 DisplayImage(compressUri);            } catch (e: Exception) {                e.printStackTrace()            }        }    }    private fun DisplayImage(mImageCaptureUri: Uri?) {        Glide.with(this).                load(mImageCaptureUri).                apply(RequestOptions().                        placeholder(R.drawable.photos).                        error(R.drawable.photos)).                into(imgSelectedIvOrVid!!)    }    private fun callSupportWS() {        val progressDialog = CustomProgressDialog(this@SupportActivity, R.style.progress_dialog_text_style)        progressDialog.show()        val imgeAndVideoUpload = getMultipartImgUpload()        AndroidNetworking.upload(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_upload_image)                .addMultipartFile("upload_file", imgeAndVideoUpload)                .addMultipartParameter("comment", edtComment!!.text.toString())                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(CommonResponse::class.java, object : ParsedRequestListener<CommonResponse> {                    override fun onResponse(response: CommonResponse?) {                        if (progressDialog.isShowing())                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                             CustomDialog.instance!!.showalert(this@SupportActivity, response!!.status!!.message!!)                             finish()                        } else {                            try {                                CustomDialog.instance!!.showalert(this@SupportActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                CustomDialog.instance!!.showalert(this@SupportActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        if (progressDialog != null && progressDialog.isShowing())                            progressDialog.dismiss()                    }                })    }    private fun getMultipartImgUpload(): File? {        return if (mImageCaptureUri != null) {            if (!TextUtils.isEmpty(mImageCaptureUri.toString())) {                FileUtils.getFile(this, mImageCaptureUri)            } else {                null            }        } else {            FileUtils.getFile(this, mImageCaptureUri)        }    }}