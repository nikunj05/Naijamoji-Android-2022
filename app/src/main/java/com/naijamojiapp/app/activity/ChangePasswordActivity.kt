package com.naijamojiapp.app.activityimport android.content.Intentimport android.os.Bundleimport android.text.TextUtilsimport android.util.Logimport android.view.Viewimport android.view.Windowimport android.view.WindowManagerimport android.widget.Buttonimport android.widget.EditTextimport android.widget.RelativeLayoutimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport com.androidnetworking.AndroidNetworkingimport com.androidnetworking.common.Priorityimport com.androidnetworking.error.ANErrorimport com.androidnetworking.interfaces.ParsedRequestListenerimport com.naijamojiapp.Rimport com.naijamojiapp.app.customview.CustomDialogimport com.naijamojiapp.app.customview.CustomProgressDialogimport com.naijamojiapp.app.response.CommonResponseimport com.naijamojiapp.app.response.SignUpResponseimport com.naijamojiapp.app.roomDB.AppDatabaseimport com.naijamojiapp.app.sqlitedb.DatabaseHelperimport com.naijamojiapp.app.utils.CheckConnectionimport com.naijamojiapp.app.utils.Constantsimport com.naijamojiapp.app.utils.Preferencesimport com.naijamojiapp.app.utils.Utilityclass ChangePasswordActivity : AppCompatActivity(), View.OnClickListener {    var rlBack : RelativeLayout? = null    var edtOldPassword : EditText? = null    var edtNewPassword : EditText? = null    var edtConfirmPassword : EditText? = null    var btnChangePass : Button? = null    lateinit var database : DatabaseHelper    var mDatabase : AppDatabase? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        Utility.instance!!.setTopBar(this,window)        setContentView(R.layout.activity_change_password)        init()    }    private fun init() {        mDatabase = AppDatabase.getDatabaseInstance(this@ChangePasswordActivity)       // database = DatabaseHelper(this@ChangePasswordActivity)        rlBack = findViewById(R.id.rl_back)        rlBack!!.setOnClickListener(this)        edtOldPassword = findViewById(R.id.edtOldPassword)        edtNewPassword = findViewById(R.id.edtNewPassword)        edtConfirmPassword = findViewById(R.id.edtConfirmPassword)        btnChangePass = findViewById(R.id.btnChangePass)        btnChangePass!!.setOnClickListener(this)    }    override fun onClick(view: View?) {        when (view!!.id) {            R.id.rl_back -> {                finish()            }            R.id.btnChangePass -> {                //CallChangePasswordWebservice                if (CheckConnection.getInstance(this).isConnectingToInternet) {                    if (isValid()) {                      callChangePasswordWS()                    }                } else {                    CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.check_internet_connection))                }            }        }    }    private fun callChangePasswordWS() {        val progressDialog = CustomProgressDialog(this@ChangePasswordActivity, R.style.progress_dialog_text_style)        progressDialog.show()        AndroidNetworking.post(Constants.INSTANCE.URLLOCAL + Constants.INSTANCE.strWS_change_password)                .addBodyParameter(Constants.INSTANCE.str_old_pass, edtOldPassword!!.text.toString())                .addBodyParameter(Constants.INSTANCE.str_new_pass, edtConfirmPassword!!.text.toString())                .setPriority(Priority.MEDIUM)                .build()                .getAsObject(CommonResponse::class.java, object : ParsedRequestListener<CommonResponse> {                    override fun onResponse(response: CommonResponse?) {                        Log.i("response", response.toString())                        if (progressDialog.isShowing)                            progressDialog.dismiss()                        var mSuccess = false                        if (response != null)                            if (response.status!!.success == (Constants.INSTANCE.one)) {                                mSuccess = true                            }                        if (mSuccess) {                            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, response!!.status!!.message!!)                            goToLoginScreen()                        } else {                            try {                                CustomDialog.instance!!.showalert(this@ChangePasswordActivity, response!!.status!!.message!!)                            } catch (e: Exception) {                                e.printStackTrace()                                CustomDialog.instance!!.showalert(this@ChangePasswordActivity, response!!.status!!.message!!)                            }                        }                    }                    override fun onError(anError: ANError) {                        Log.i("error", anError.toString())                        CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.old_pass_notvalid))                        if (progressDialog != null && progressDialog.isShowing)                            progressDialog.dismiss()                    }                })    }    private fun goToLoginScreen() {//        database.deleteTable()        mDatabase!!.userDao().deleteRecentTable()        val intent = Intent(this, LoginActivity::class.java)        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)        Preferences.INSTANCE!!.ClearPrefsValue()        startActivity(intent)    }    private fun isValid(): Boolean {        if (TextUtils.isEmpty(edtOldPassword!!.text.toString())) {            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.please_enter_oldPass))            return false        } else {            edtOldPassword!!.error = null        }        if (edtOldPassword!!.text.toString().length < 8) {            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.please_enter_valid_oldpass))            return false        } else {            edtOldPassword!!.error = null        }        if (!Utility.instance!!.isValidPassword(edtOldPassword!!.text.toString())) {            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.please_enter_valid_oldpass))            return false        }        if (TextUtils.isEmpty(edtNewPassword!!.text.toString())) {            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.please_enter_newPass))            return false        } else {            edtNewPassword!!.error = null        }        if (edtNewPassword!!.text.toString().length < 8) {            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.please_enter_valid_newpass))            return false        } else {            edtNewPassword!!.error = null        }        if (!Utility.instance!!.isValidPassword(edtNewPassword!!.text.toString())) {            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.please_enter_valid_newpass))            return false        }        if (TextUtils.isEmpty(edtConfirmPassword!!.text.toString())) {            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.please_enter_confirmPass))            return false        } else {            edtConfirmPassword!!.error = null        }        if (!edtNewPassword!!.text.toString().equals(edtConfirmPassword!!.text.toString())) {            CustomDialog.instance!!.showalert(this@ChangePasswordActivity, resources.getString(R.string.please_enter_valid_newandConfirm))            return false        }        return true    }}